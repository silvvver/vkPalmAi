'use client';
import { _ as _object_spread } from "@swc/helpers/_/_object_spread";
import { _ as _object_without_properties } from "@swc/helpers/_/_object_without_properties";
import { jsx as _jsx } from "react/jsx-runtime";
import * as React from "react";
import { appearanceTypes, useIconAppearance } from "../IconAppearanceProvider/IconAppearanceProvider.js";
import { getDensityBucketAppearanceKey } from "./utils/getDensityBucketAppearanceKey.js";
// https://developer.android.com/training/multiscreen/screendensities#TaskProvideAltBmp
const dppxModifiersMap = {
    mdpi: 1,
    hdpi: 1.5,
    // Должно быть 2, но так как мы пропускаем при генерации hdpi, понижаем это значение.
    // Считаем избыточным генерацию hdpi, xhdpi в использовании для hdpi не сильно шакалится.
    xhdpi: 1.5,
    xxhdpi: 3,
    xxxhdpi: 4
};
const densityBucketTypes = Object.keys(dppxModifiersMap);
const RasterIcon = /*#__PURE__*/ React.memo(function RasterIcon(_param) {
    var { getRootRef, id, size, className } = _param, restProps = _object_without_properties(_param, [
        "getRootRef",
        "id",
        "size",
        "className"
    ]);
    const appearance = useIconAppearance();
    const srcSet = densityBucketTypes.reduce((set, densityBucket)=>{
        const densityAppearanceKey = getDensityBucketAppearanceKey(appearance, densityBucket);
        let src = restProps[densityAppearanceKey];
        delete restProps[densityAppearanceKey];
        for (const appearance of appearanceTypes){
            const densityAppearanceKey = getDensityBucketAppearanceKey(appearance, densityBucket);
            if (!src) {
                src = restProps[densityAppearanceKey];
            }
            delete restProps[densityAppearanceKey];
        }
        if (src) {
            set.push(`${src} ${dppxModifiersMap[densityBucket]}x`);
        }
        return set;
    }, []).join(', ');
    return /*#__PURE__*/ _jsx("img", _object_spread({
        ref: getRootRef,
        "aria-hidden": "true",
        alt: "",
        className: [
            'vkuiIcon',
            `vkuiIcon--${size}`,
            `vkuiIcon--w-${size}`,
            `vkuiIcon--h-${size}`,
            `vkuiIcon--${id}`,
            'vkuiRasterIcon',
            className
        ].join(' ').trim(),
        width: size,
        height: size,
        srcSet: srcSet,
        loading: "lazy",
        draggable: false
    }, restProps));
});
export function makeRasterIcon(componentName, id, size, densityBucketAppearanceSet) {
    const Icon = (props)=>{
        return /*#__PURE__*/ _jsx(RasterIcon, _object_spread({
            id: id,
            size: size
        }, densityBucketAppearanceSet, props));
    };
    Icon.size = size;
    Icon.isRasterIcon = true;
    Icon.displayName = componentName;
    return Icon;
}

//# sourceMappingURL=RasterIcon.js.map