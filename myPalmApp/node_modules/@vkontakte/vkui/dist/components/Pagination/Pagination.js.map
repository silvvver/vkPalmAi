{"version":3,"sources":["../../../src/components/Pagination/Pagination.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { Icon24ChevronCompactLeft, Icon24ChevronCompactRight } from '@vkontakte/icons';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useConfigDirection } from '../../hooks/useConfigDirection';\nimport { type PaginationPageType, usePagination } from '../../hooks/usePagination';\nimport type { HasComponent, HTMLAttributesWithRootRef } from '../../types';\nimport { RootComponent } from '../RootComponent/RootComponent';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden';\nimport {\n  type CustomPaginationNavigationButton,\n  PaginationNavigationButton,\n  type PaginationNavigationButtonProps,\n} from './PaginationNavigationButton/PaginationNavigationButton';\nimport {\n  type CustomPaginationPageButtonProps,\n  PaginationPageButton,\n} from './PaginationPage/PaginationPageButton';\nimport { PaginationPageEllipsis } from './PaginationPage/PaginationPageEllipsis';\nimport styles from './Pagination.module.css';\n\nexport interface PaginationProps extends Omit<HTMLAttributesWithRootRef<HTMLElement>, 'onChange'> {\n  /**\n   * Текущая страница.\n   */\n  currentPage?: number;\n  /**\n   * Кол-во всегда видимых страниц по краям текущей страницы.\n   */\n  siblingCount?: number;\n  /**\n   * Кол-во всегда видимых страниц в начале и в конце.\n   */\n  boundaryCount?: number;\n  /**\n   * Общее кол-во страниц.\n   */\n  totalPages?: number;\n  /**\n   * Блокировка взаимодействия с компонентом.\n   */\n  disabled?: boolean;\n  /**\n   * Декоративный текст для кнопки навигации назад.\n   *\n   * > Note: Экранные дикторы будут использовать `prevButtonLabel`.\n   */\n  prevButtonCaption?: string;\n  /**\n   * Декоративный текст для кнопки навигации вперёд.\n   *\n   * > Note: Экранные дикторы будут использовать `nextButtonLabel`.\n   */\n  nextButtonCaption?: string;\n  /**\n   * Задаёт стиль отображения кнопок навигации.\n   *\n   * - `icon` – показывать только иконку;\n   * - `caption` – показывать только подпись;\n   * - `both` – показывать и иконку, и подпись.\n   */\n  navigationButtonsStyle?: PaginationNavigationButtonProps['style'];\n  /**\n   * [a11y] Метка для обозначения блока навигации.\n   */\n  navigationLabel?: string;\n  /**\n   * Тип элемента отрисовки блока навигации.\n   */\n  navigationLabelComponent?: HasComponent['Component'];\n  /**\n   * [a11y] Метка для кнопки навигации назад.\n   */\n  prevButtonLabel?: string;\n  /**\n   * [a11y] Метка для кнопки навигации вперёд.\n   */\n  nextButtonLabel?: string;\n  /**\n   * [a11y] Функция для переопределения и/или локализации метки кнопки страницы.\n   *\n   * > Note: По возможности лучше не использовать,\n   * так как компонент и так проставляет номер страницы в разметку,\n   * что достаточно для пользователей скринридеров.\n   * Дополнительная информация скорее будет избыточна,\n   * так как будет зачитываться для каждой кнопки при перемещении по списку.\n   */\n  getPageLabel?: (isCurrent: boolean) => string;\n  /**\n   * Обработчик изменения выбранной страницы.\n   */\n  onChange?: (page: number, event: React.MouseEvent<HTMLElement>) => void;\n  /**\n   * Функция для кастомного рендера кнопок страниц.\n   *\n   * > Note: `CustomPaginationPageButtonProps` наследует API [Tappable](https://vkcom.github.io/VKUI/#/Tappable).\n   */\n  renderPageButton?: (props: CustomPaginationPageButtonProps) => React.ReactNode;\n  /**\n   Функция для кастомного рендера кнопок навигации `prev` и `next`.\n   *\n   * > Note: `CustomPaginationNavigationButton` наследует API [Button](https://vkcom.github.io/VKUI/#/Button).\n   */\n  renderNavigationButton?: (props: CustomPaginationNavigationButton) => React.ReactNode;\n  /**\n   * Передает атрибут `data-testid` для кнопок страниц.\n   */\n  pageButtonTestId?: (day: PaginationPageType, active: boolean) => string;\n  /**\n   * Передает атрибут `data-testid` для кнопки `prev`.\n   */\n  prevButtonTestId?: string;\n  /**\n   * Передает атрибут `data-testid` для кнопки `next`.\n   */\n  nextButtonTestId?: string;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/Pagination\n */\nexport const Pagination = ({\n  currentPage = 1,\n  siblingCount = 1,\n  boundaryCount = 1,\n  totalPages = 1,\n  disabled,\n  prevButtonCaption = 'Назад',\n  nextButtonCaption = 'Вперёд',\n  navigationButtonsStyle = 'icon',\n  getPageLabel,\n  navigationLabel = 'Страницы',\n  navigationLabelComponent = 'h2',\n  prevButtonLabel = 'Перейти на предыдущую страницу',\n  nextButtonLabel = 'Перейти на следующую страницу',\n  onChange,\n  renderPageButton,\n  pageButtonTestId,\n  prevButtonTestId,\n  nextButtonTestId,\n  renderNavigationButton,\n  ...resetProps\n}: PaginationProps): React.ReactNode => {\n  const direction = useConfigDirection();\n  const isRtl = direction === 'rtl';\n  const pages = usePagination({\n    currentPage,\n    totalPages,\n    siblingCount,\n    boundaryCount,\n  });\n  const isFirstPage = currentPage === 1;\n  const isLastPage = currentPage === totalPages;\n  const prevPage = isFirstPage ? undefined : currentPage - 1;\n  const nextPage = isLastPage ? undefined : currentPage + 1;\n\n  const handlePrevClick = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (onChange && prevPage !== undefined) {\n        onChange(prevPage, event);\n      }\n    },\n    [prevPage, onChange],\n  );\n\n  const handleClick = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      const page: string = event.currentTarget.dataset.page || '1';\n      onChange?.(Number(page), event);\n    },\n    [onChange],\n  );\n\n  const handleNextClick = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (onChange && nextPage !== undefined) {\n        onChange(nextPage, event);\n      }\n    },\n    [nextPage, onChange],\n  );\n\n  const { sizeY } = useAdaptivity();\n\n  const renderPages = React.useCallback(\n    (page: PaginationPageType) => {\n      const isCurrent = page === currentPage;\n      const dataTestId = pageButtonTestId?.(page, isCurrent);\n\n      switch (page) {\n        case 'start-ellipsis':\n        case 'end-ellipsis':\n          return (\n            <li key={page}>\n              <PaginationPageEllipsis disabled={disabled} data-testid={dataTestId} />\n            </li>\n          );\n        default: {\n          return (\n            <li key={page}>\n              <PaginationPageButton\n                getPageLabel={getPageLabel}\n                isCurrent={isCurrent}\n                onClick={handleClick}\n                disabled={disabled}\n                sizeY={sizeY}\n                renderPageButton={renderPageButton}\n                data-testid={dataTestId}\n              >\n                {page}\n              </PaginationPageButton>\n            </li>\n          );\n        }\n      }\n    },\n    [currentPage, disabled, getPageLabel, handleClick, renderPageButton, sizeY, pageButtonTestId],\n  );\n\n  const navigationLabelId = React.useId();\n\n  return (\n    <RootComponent\n      Component=\"nav\"\n      role=\"navigation\"\n      aria-labelledby={navigationLabelId}\n      {...resetProps}\n    >\n      <VisuallyHidden id={navigationLabelId} Component={navigationLabelComponent}>\n        {navigationLabel}\n      </VisuallyHidden>\n      <ul className={styles.list}>\n        <li className={styles.prevButtonContainer}>\n          <PaginationNavigationButton\n            type=\"prev\"\n            style={navigationButtonsStyle}\n            caption={prevButtonCaption}\n            Icon={isRtl ? Icon24ChevronCompactRight : Icon24ChevronCompactLeft}\n            a11yLabel={prevButtonLabel}\n            disabled={isFirstPage || disabled}\n            onClick={handlePrevClick}\n            data-page={prevPage}\n            data-testid={prevButtonTestId}\n            renderNavigationButton={renderNavigationButton}\n          />\n        </li>\n        {pages.map(renderPages)}\n        <li className={styles.nextButtonContainer}>\n          <PaginationNavigationButton\n            type=\"next\"\n            style={navigationButtonsStyle}\n            caption={nextButtonCaption}\n            Icon={isRtl ? Icon24ChevronCompactLeft : Icon24ChevronCompactRight}\n            a11yLabel={nextButtonLabel}\n            disabled={isLastPage || disabled}\n            onClick={handleNextClick}\n            data-page={nextPage}\n            data-testid={nextButtonTestId}\n            renderNavigationButton={renderNavigationButton}\n          />\n        </li>\n      </ul>\n    </RootComponent>\n  );\n};\n"],"names":["React","Icon24ChevronCompactLeft","Icon24ChevronCompactRight","useAdaptivity","useConfigDirection","usePagination","RootComponent","VisuallyHidden","PaginationNavigationButton","PaginationPageButton","PaginationPageEllipsis","Pagination","currentPage","siblingCount","boundaryCount","totalPages","disabled","prevButtonCaption","nextButtonCaption","navigationButtonsStyle","getPageLabel","navigationLabel","navigationLabelComponent","prevButtonLabel","nextButtonLabel","onChange","renderPageButton","pageButtonTestId","prevButtonTestId","nextButtonTestId","renderNavigationButton","resetProps","direction","isRtl","pages","isFirstPage","isLastPage","prevPage","undefined","nextPage","handlePrevClick","useCallback","event","handleClick","page","currentTarget","dataset","Number","handleNextClick","sizeY","renderPages","isCurrent","dataTestId","li","data-testid","onClick","navigationLabelId","useId","Component","role","aria-labelledby","id","ul","className","type","style","caption","Icon","a11yLabel","data-page","map"],"mappings":"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"}