import type { HasRef, HasRootRef, LiteralUnion } from '../../../types';
import type { ImageBaseSize } from '../../ImageBase/ImageBase';
import { type TappableProps } from '../../Tappable/Tappable';
import { type SubheadProps } from '../../Typography/Subhead/Subhead';
export interface HorizontalCellShowMoreProps extends Omit<TappableProps, 'getRootRef' | 'size' | 'borderRadiusMode'>, HasRef<HTMLElement>, HasRootRef<HTMLDivElement> {
    /**
     * Задаёт высоту компонента. Должeн соответствовать размеру картинок
     * внутри соседних `HorizontalCell` компонентов.
     *
     * Используйте размеры, заданные дизайн-системой (смотри типы).
     *
     * > ⚠️ Использование кастомного размера – это пограничный кейс.
     *
     * Игнорируется, если `size='s'`.
     */
    height?: LiteralUnion<ImageBaseSize, number>;
    /**
     * Задаёт размер компонента.
     *
     * Значение `s` применяется для `<HorizontalCell size="s"`, в остальных случаях рекомендуется `m`.
     */
    size?: 's' | 'm';
    /**
     * Предназначен для отрисовки текста.
     * По умолчанию для `size='s'` содержит текст `Все`, для `size='m'` - `Показать все`.
     * */
    children?: SubheadProps['children'];
    /**
     * Выравнивание по центру относительно родителя.
     */
    centered?: boolean;
}
export declare const HorizontalCellShowMore: ({ className, style, getRef, getRootRef, height, size, children, centered, ...restProps }: HorizontalCellShowMoreProps) => React.ReactNode;
//# sourceMappingURL=HorizontalCellShowMore.d.ts.map