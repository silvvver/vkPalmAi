import * as React from 'react';
import type { HTMLAttributesWithRootRef } from '../../types';
export type UsersStackRenderWrapperProps = {
    /**
     * Контент для обертки.
     */
    children: React.ReactElement;
    /**
     * Путь до фотографии.
     */
    ['data-src']: string;
};
export type UsersStackPhoto = {
    /**
     * Путь до фотографии.
     */
    src: string;
    /**
     * Функция для рендера обертки над фотографией.
     */
    renderWrapper?: (props: UsersStackRenderWrapperProps) => React.ReactElement;
};
export interface UsersStackProps extends HTMLAttributesWithRootRef<HTMLDivElement> {
    /**
     * Массив ссылок на фотографии либо массив структур типа `UsersStackPhoto`.
     */
    photos?: string[] | UsersStackPhoto[];
    /**
     * Размер аватарок.
     */
    size?: 's' | 'm' | 'l';
    /**
     * Количество аватарок, которые будут показаны.
     * Если в массиве `photos` больше элементов и используется размер `m`, то будет показано количество остальных элементов.
     */
    visibleCount?: number;
    /**
     * Число, которое будет указано в счетчике.
     * По умолчанию высчитывается по формуле `photos.length - visibleCount`.
     * Если число больше 99, то счетчик скроется.
     */
    count?: number;
    /**
     * Определяет положение аватаров
     * Режим `block-start` рекомендуется использовать с размером `m`.
     */
    avatarsPosition?: 'inline-start' | 'block-start' | 'inline-end';
}
/**
 * @see https://vkcom.github.io/VKUI/#/UsersStack
 */
export declare const UsersStack: ({ photos, visibleCount, count, size, children, avatarsPosition, ...restProps }: UsersStackProps) => React.ReactNode;
//# sourceMappingURL=UsersStack.d.ts.map