{"version":3,"sources":["../../../src/components/RootComponent/RootComponent.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { mergeStyle } from '../../helpers/mergeStyle';\nimport type { HasComponent, HasRootRef } from '../../types';\nimport styles from './RootComponent.module.css';\n\nexport interface RootComponentProps<T>\n  extends React.AllHTMLAttributes<T>,\n    HasRootRef<T>,\n    HasComponent {\n  /**\n   * @deprecated Since 7.3.0.\n   *\n   * Свойство устарело и будет удалено в `v8`, используйте свойство `className`.\n   */\n  baseClassName?: string | false; // TODO:  Перенести свойство в RootComponentInternalProps, в непубличное API\n  /**\n   * @deprecated Since 7.3.0.\n   *\n   * Свойство устарело и будет удалено в `v8`, используйте свойство `style`.\n   */\n  baseStyle?: React.CSSProperties; // TODO:  Перенести свойство в RootComponentInternalProps, в непубличное API\n}\n\n/**\n * Базовый корневой компонент.\n */\nexport const RootComponent = <T,>({\n  Component = 'div',\n  baseClassName,\n  className,\n  baseStyle,\n  style,\n  getRootRef,\n  ...restProps\n}: RootComponentProps<T>): React.ReactNode => (\n  <Component\n    ref={getRootRef}\n    className={classNames(\n      className,\n      baseClassName,\n      styles.host,\n      restProps.hidden === true && styles.hidden,\n    )}\n    style={mergeStyle(baseStyle, style)}\n    {...restProps}\n  />\n);\n"],"names":["React","classNames","mergeStyle","RootComponent","Component","baseClassName","className","baseStyle","style","getRootRef","restProps","ref","hidden"],"mappings":";;;AAAA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,UAAU,QAAQ,8BAA2B;AAsBtD;;CAEC,GACD,OAAO,MAAMC,gBAAgB;QAAK,EAChCC,YAAY,KAAK,EACjBC,aAAa,EACbC,SAAS,EACTC,SAAS,EACTC,KAAK,EACLC,UAAU,EAEY,WADnBC;QANHN;QACAC;QACAC;QACAC;QACAC;QACAC;;yBAGA,KAACL;QACCO,KAAKF;QACLH,WAAWL,WACTK,WACAD,0CAEAK,UAAUE,MAAM,KAAK;QAEvBJ,OAAON,WAAWK,WAAWC;OACzBE;EAEN"}