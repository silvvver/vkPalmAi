import { type AlignType } from '../../types';
import { type GallerySlidesState, type LayoutState, type LoopPoint, type SlidesManagerState } from './types';
export declare const revertRtlValue: (n: number, isRtl: boolean) => number;
export declare const isBigger: (a: number, b: number, isRtl: boolean) => boolean;
export declare const isBiggerOrEqual: (a: number, b: number, isRtl: boolean) => boolean;
export declare const isLower: (a: number, b: number, isRtl: boolean) => boolean;
export declare const isLowerOrEqual: (a: number, b: number, isRtl: boolean) => boolean;
export declare const validateIndent: (slidesManager: SlidesManagerState, value: number, isRtl: boolean, bounded?: boolean) => number;
export declare function calculateIndent({ targetIndex, slidesManager, isCenter, looped, isRtl, }: {
    targetIndex: number;
    slidesManager: SlidesManagerState;
    isCenter: boolean;
    looped: boolean;
    isRtl: boolean;
}): number;
/**
 * Вычисляем индексы слайдов, которые необходимо смещать.
 */
export declare function getShiftedIndexes(direction: 1 | -1, slides: GallerySlidesState[], availableWidth: number): number[];
/**
 * Вычисляем "ключевые" точки, на которых должно происходить смещение слайдов.
 */
export declare function getLoopPoints(slidesManager: SlidesManagerState, containerWidth: number, isRtl?: boolean): LoopPoint[];
export declare function getTargetIndex({ slides, slideIndex, currentShiftX, currentShiftXDelta, looped, max, isRtl, }: {
    slides: GallerySlidesState[];
    slideIndex: number;
    currentShiftX: number;
    currentShiftXDelta: number;
    looped: boolean;
    max?: number | null;
    isRtl?: boolean;
}): number;
interface CalcMin extends Partial<LayoutState> {
    isRtl?: boolean;
    align: AlignType;
}
export declare const calcMin: ({ containerWidth, layerWidth, slides, viewportOffsetWidth, isFullyVisible, align, isRtl, }: CalcMin) => number;
interface CalcMax extends Partial<LayoutState> {
    isRtl?: boolean;
    isCenterAlign: boolean;
}
export declare const calcMax: ({ slides, containerWidth, isCenterAlign, isRtl, }: CalcMax) => number;
export {};
//# sourceMappingURL=helpers.d.ts.map