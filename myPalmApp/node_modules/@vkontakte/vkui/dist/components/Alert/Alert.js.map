{"version":3,"sources":["../../../src/components/Alert/Alert.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { type UseFocusTrapProps } from '../../hooks/useFocusTrap';\nimport { warnOnce } from '../../lib/warnOnce';\nimport type {\n  AlignType,\n  AnchorHTMLAttributesOnly,\n  HasDataAttribute,\n  HasRootRef,\n} from '../../types';\nimport type { AppRootPortalProps } from '../AppRoot/AppRootPortal';\nimport { AppRootPortal } from '../AppRoot/AppRootPortal';\nimport { useScrollLock } from '../AppRoot/ScrollContext';\nimport type { ButtonProps } from '../Button/Button';\nimport { PopoutWrapper } from '../PopoutWrapper/PopoutWrapper';\nimport type { AlertActionProps } from './AlertAction';\nimport { AlertBase } from './AlertBase';\n\ntype AlertActionMode = 'cancel' | 'destructive' | 'default';\n\nexport type { AlertActionProps };\n\nexport interface AlertActionInterface\n  extends Pick<ButtonProps, 'Component'>,\n    AnchorHTMLAttributesOnly,\n    HasDataAttribute {\n  /**\n   * Текст опции.\n   */\n  title: string;\n  /**\n   * Обработчик нажатия на опцию. Если свойство `autoCloseDisabled` включено,\n   * то в аргументы `action` передаётся объект с функцией close,\n   * вызвав которую можно закрыть `action` вручную.\n   */\n  action?: (args?: { close?: VoidFunction }) => void;\n  /**\n   * По умолчанию нажатие на опцию вызывает переданную в `Alert` функцию `onClose`, данное свойство\n   * позволяет отключить такое поведение.\n   */\n  autoCloseDisabled?: boolean;\n  /**\n   * Режим отображения опции.\n   */\n  mode: AlertActionMode;\n}\n\nexport interface AlertProps\n  extends Omit<React.HTMLAttributes<HTMLElement>, 'title' | 'autoFocus'>,\n    Pick<UseFocusTrapProps, 'restoreFocus' | 'autoFocus'>,\n    Pick<AppRootPortalProps, 'usePortal'>,\n    HasRootRef<HTMLDivElement> {\n  /**\n   * Расположение действий - вертикально или горизонтально.\n   */\n  actionsLayout?: 'vertical' | 'horizontal';\n  /**\n   * Тип выравнивания действий.\n   */\n  actionsAlign?: AlignType;\n  /**\n   * Список действий.\n   */\n  actions?: AlertActionInterface[];\n  /**\n   * Функция для отрисовки действия.\n   */\n  renderAction?: (props: AlertActionProps) => React.ReactNode;\n  /**\n   * Заголовок модального окна.\n   */\n  title?: React.ReactNode;\n  /**\n   * Описание модального окна.\n   */\n  description?: React.ReactNode;\n  /**\n   * Обработчик закрытия модального окна.\n   */\n  onClose: VoidFunction;\n  /**\n   * Текст кнопки закрытия. Делает ее доступной для ассистивных технологий.\n   */\n  dismissLabel?: string;\n  /**\n   * Расположение кнопки закрытия (внутри и вне `popout'a`)\n   * Доступно только в `compact`-режиме, не отображается на `iOS`.\n   *\n   * ⚠️ ВНИМАНИЕ: использование `none` скрывает крестик, это негативно сказывается на пользовательском опыте.\n   */\n  dismissButtonMode?: 'inside' | 'outside' | 'none';\n  /**\n   * Передает атрибут `data-testid` для кнопки закрытия.\n   */\n  dismissButtonTestId?: string;\n  /**\n   * Передает атрибут `data-testid` для заголовка.\n   */\n  titleTestId?: string;\n  /**\n   * Передает атрибут `data-testid` для описания.\n   */\n  descriptionTestId?: string;\n  /**\n   * По умолчанию событие onClick не всплывает.\n   */\n  allowClickPropagation?: boolean;\n}\n\nconst warn = warnOnce('Alert');\n\n/**\n * @see https://vkcom.github.io/VKUI/#/Alert\n */\nexport const Alert = ({\n  usePortal,\n  style,\n  className,\n  getRootRef,\n  ...restProps\n}: AlertProps): React.ReactNode => {\n  const [closing, setClosing] = React.useState(false);\n\n  const close = React.useCallback(() => {\n    setClosing(true);\n  }, []);\n\n  useScrollLock();\n\n  if (\n    process.env.NODE_ENV === 'development' &&\n    !restProps.title &&\n    !restProps['aria-label'] &&\n    !restProps['aria-labelledby']\n  ) {\n    warn(\n      'Если \"title\" не используется, то необходимо задать либо \"aria-label\", либо \"aria-labelledby\" (см. правило axe aria-dialog-name)',\n    );\n  }\n\n  return (\n    <AppRootPortal usePortal={usePortal}>\n      <PopoutWrapper\n        className={className}\n        closing={closing}\n        style={style}\n        onClick={close}\n        getRootRef={getRootRef}\n        strategy=\"fixed\"\n      >\n        <AlertBase {...restProps} closing={closing} setClosing={setClosing} />\n      </PopoutWrapper>\n    </AppRootPortal>\n  );\n};\n"],"names":["React","warnOnce","AppRootPortal","useScrollLock","PopoutWrapper","AlertBase","warn","Alert","usePortal","style","className","getRootRef","restProps","closing","setClosing","useState","close","useCallback","process","env","NODE_ENV","title","onClick","strategy"],"mappings":"AAAA;;;;;AAEA,YAAYA,WAAW,QAAQ;AAE/B,SAASC,QAAQ,QAAQ,wBAAqB;AAQ9C,SAASC,aAAa,QAAQ,8BAA2B;AACzD,SAASC,aAAa,QAAQ,8BAA2B;AAEzD,SAASC,aAAa,QAAQ,oCAAiC;AAE/D,SAASC,SAAS,QAAQ,iBAAc;AA6FxC,MAAMC,OAAOL,SAAS;AAEtB;;CAEC,GACD,OAAO,MAAMM,QAAQ;QAAC,EACpBC,SAAS,EACTC,KAAK,EACLC,SAAS,EACTC,UAAU,EAEC,WADRC;QAJHJ;QACAC;QACAC;QACAC;;IAGA,MAAM,CAACE,SAASC,WAAW,GAAGd,MAAMe,QAAQ,CAAC;IAE7C,MAAMC,QAAQhB,MAAMiB,WAAW,CAAC;QAC9BH,WAAW;IACb,GAAG,EAAE;IAELX;IAEA,IACEe,QAAQC,GAAG,CAACC,QAAQ,KAAK,iBACzB,CAACR,UAAUS,KAAK,IAChB,CAACT,SAAS,CAAC,aAAa,IACxB,CAACA,SAAS,CAAC,kBAAkB,EAC7B;QACAN,KACE;IAEJ;IAEA,qBACE,KAACJ;QAAcM,WAAWA;kBACxB,cAAA,KAACJ;YACCM,WAAWA;YACXG,SAASA;YACTJ,OAAOA;YACPa,SAASN;YACTL,YAAYA;YACZY,UAAS;sBAET,cAAA,KAAClB,mDAAcO;gBAAWC,SAASA;gBAASC,YAAYA;;;;AAIhE,EAAE"}