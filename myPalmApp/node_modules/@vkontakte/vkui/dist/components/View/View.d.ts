import * as React from 'react';
import { type NavIdProps } from '../../lib/getNavId';
import type { HTMLAttributesWithRootRef } from '../../types';
interface Scrolls {
    [index: string]: number | undefined;
}
interface ViewsScrolls {
    [index: string]: Scrolls;
}
export declare let scrollsCache: ViewsScrolls;
export interface ViewProps extends HTMLAttributesWithRootRef<HTMLElement>, NavIdProps {
    /**
     * `id` активной панели.
     */
    activePanel: string;
    /**
     * Обработчик, который вызывается при завершении анимации смены активной панели.
     */
    onTransition?: (params: {
        isBack: boolean;
        from: string;
        to: string;
    }) => void;
    /**
     * Обработчик свайпа назад.
     */
    onSwipeBack?: () => void;
    /**
     * Обработчик начала анимации свайпа назад.
     *
     * Чтобы остановить свайп назад, возвращайте `"prevent"`.
     */
    onSwipeBackStart?: (activePanel: string | null) => void | 'prevent';
    /**
     * Обработчик завершения анимации отмененного пользователем свайпа.
     */
    onSwipeBackCancel?: () => void;
    /**
     * Массив из id панелей в порядке открытия.
     */
    history?: string[];
    /**
     * Коллекция Panel. У каждой Panel должен быть уникальный `id`.
     */
    children: React.ReactElement | Iterable<React.ReactElement>;
}
/**
 * @see https://vkcom.github.io/VKUI/#/View
 */
export declare const View: ({ activePanel: activePanelProp, history, nav, onTransition, onSwipeBack, onSwipeBackStart, onSwipeBackCancel: onSwipeBackCancelProp, children, className, ...restProps }: ViewProps) => React.ReactNode;
export {};
//# sourceMappingURL=View.d.ts.map