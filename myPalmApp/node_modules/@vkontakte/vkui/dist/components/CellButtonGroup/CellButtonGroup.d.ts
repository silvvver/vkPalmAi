import * as React from 'react';
import { type HTMLAttributesWithRootRef } from '../../types';
export type CellButtonGroupProps = HTMLAttributesWithRootRef<HTMLDivElement>;
/**
 * @since 7.2.0
 *
 * @see https://vkcom.github.io/VKUI/#/CellButtonGroup
 */
export declare const CellButtonGroup: {
    (props: CellButtonGroupProps): React.ReactNode;
    Separator: ({ className, ...restProps }: {
        slot?: string | undefined | undefined;
        style?: React.CSSProperties | undefined;
        title?: string | undefined | undefined;
        defaultChecked?: boolean | undefined | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined | undefined;
        suppressHydrationWarning?: boolean | undefined | undefined;
        accessKey?: string | undefined | undefined;
        autoCapitalize?: "off" | "none" | "on" | "sentences" | "words" | "characters" | undefined | (string & {}) | undefined;
        autoFocus?: boolean | undefined | undefined;
        className?: string | undefined | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
        contextMenu?: string | undefined | undefined;
        dir?: string | undefined | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined | undefined;
        hidden?: boolean | undefined | undefined;
        id?: string | undefined | undefined;
        lang?: string | undefined | undefined;
        nonce?: string | undefined | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        tabIndex?: number | undefined | undefined;
        translate?: "yes" | "no" | undefined | undefined;
        radioGroup?: string | undefined | undefined;
        role?: React.AriaRole | undefined;
        about?: string | undefined | undefined;
        content?: string | undefined | undefined;
        datatype?: string | undefined | undefined;
        inlist?: any;
        prefix?: string | undefined | undefined;
        property?: string | undefined | undefined;
        rel?: string | undefined | undefined;
        resource?: string | undefined | undefined;
        rev?: string | undefined | undefined;
        typeof?: string | undefined | undefined;
        vocab?: string | undefined | undefined;
        autoCorrect?: string | undefined | undefined;
        autoSave?: string | undefined | undefined;
        color?: string | undefined | undefined;
        itemProp?: string | undefined | undefined;
        itemScope?: boolean | undefined | undefined;
        itemType?: string | undefined | undefined;
        itemID?: string | undefined | undefined;
        itemRef?: string | undefined | undefined;
        results?: number | undefined | undefined;
        security?: string | undefined | undefined;
        unselectable?: "on" | "off" | undefined | undefined;
        popover?: "" | "auto" | "manual" | undefined | undefined;
        popoverTargetAction?: "toggle" | "show" | "hide" | undefined | undefined;
        popoverTarget?: string | undefined | undefined;
        inert?: boolean | undefined | undefined;
        inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined | undefined;
        is?: string | undefined | undefined;
        "aria-activedescendant"?: string | undefined | undefined;
        "aria-atomic"?: (boolean | "false" | "true") | undefined;
        "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined | undefined;
        "aria-braillelabel"?: string | undefined | undefined;
        "aria-brailleroledescription"?: string | undefined | undefined;
        "aria-busy"?: (boolean | "false" | "true") | undefined;
        "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-colcount"?: number | undefined | undefined;
        "aria-colindex"?: number | undefined | undefined;
        "aria-colindextext"?: string | undefined | undefined;
        "aria-colspan"?: number | undefined | undefined;
        "aria-controls"?: string | undefined | undefined;
        "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined | undefined;
        "aria-describedby"?: string | undefined | undefined;
        "aria-description"?: string | undefined | undefined;
        "aria-details"?: string | undefined | undefined;
        "aria-disabled"?: (boolean | "false" | "true") | undefined;
        "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined | undefined;
        "aria-errormessage"?: string | undefined | undefined;
        "aria-expanded"?: (boolean | "false" | "true") | undefined;
        "aria-flowto"?: string | undefined | undefined;
        "aria-grabbed"?: (boolean | "false" | "true") | undefined;
        "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined | undefined;
        "aria-hidden"?: (boolean | "false" | "true") | undefined;
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined | undefined;
        "aria-keyshortcuts"?: string | undefined | undefined;
        "aria-label"?: string | undefined | undefined;
        "aria-labelledby"?: string | undefined | undefined;
        "aria-level"?: number | undefined | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined | undefined;
        "aria-modal"?: (boolean | "false" | "true") | undefined;
        "aria-multiline"?: (boolean | "false" | "true") | undefined;
        "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined | undefined;
        "aria-owns"?: string | undefined | undefined;
        "aria-placeholder"?: string | undefined | undefined;
        "aria-posinset"?: number | undefined | undefined;
        "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-readonly"?: (boolean | "false" | "true") | undefined;
        "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined | undefined;
        "aria-required"?: (boolean | "false" | "true") | undefined;
        "aria-roledescription"?: string | undefined | undefined;
        "aria-rowcount"?: number | undefined | undefined;
        "aria-rowindex"?: number | undefined | undefined;
        "aria-rowindextext"?: string | undefined | undefined;
        "aria-rowspan"?: number | undefined | undefined;
        "aria-selected"?: (boolean | "false" | "true") | undefined;
        "aria-setsize"?: number | undefined | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined | undefined;
        "aria-valuemax"?: number | undefined | undefined;
        "aria-valuemin"?: number | undefined | undefined;
        "aria-valuenow"?: number | undefined | undefined;
        "aria-valuetext"?: string | undefined | undefined;
        children?: React.ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined | undefined;
        onCopy?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: React.FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onReset?: React.FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onError?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: React.UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: React.UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onToggle?: React.ToggleEventHandler<HTMLDivElement> | undefined;
        onBeforeToggle?: React.ToggleEventHandler<HTMLDivElement> | undefined;
        onTransitionCancel?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionCancelCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionRun?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionRunCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionStart?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionStartCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        size?: import("../../lib/spacings/sizes").SpacingSizeProp | undefined;
        getRootRef?: React.Ref<HTMLDivElement> | undefined;
        align?: "start" | "center" | "end" | undefined;
        appearance?: "primary" | "secondary" | "primary-alpha" | undefined;
    }) => import("react/jsx-runtime").JSX.Element;
};
//# sourceMappingURL=CellButtonGroup.d.ts.map