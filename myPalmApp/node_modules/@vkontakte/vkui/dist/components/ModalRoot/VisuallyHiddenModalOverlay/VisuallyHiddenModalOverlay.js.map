{"version":3,"sources":["../../../../src/components/ModalRoot/VisuallyHiddenModalOverlay/VisuallyHiddenModalOverlay.tsx"],"sourcesContent":["'use client';\n\nimport { useContext } from 'react';\nimport { setRef } from '../../../lib/utils';\nimport type { ModalOverlayProps } from '../../ModalOverlay/ModalOverlay';\nimport { ModalRootOverlayContext } from '../ModalRootContext';\nimport styles from './VisuallyHiddenModalOverlay.module.css';\n\nexport type VisuallyHiddenModalOverlayProps = ModalOverlayProps;\n\n/**\n * `ModalRoot` выставляет общий `ModalOverlay` для всех потомков, и чтобы не нарушить логику\n * в `ModalPage` и `ModalCard`, в них прокидывается данный компонент, который визуально не виден,\n * но при этом на нём сохраняется возможность взаимодействия.\n *\n * В `getRooRef` отдаёт ссылку на DOM общего `ModalOverlay`.\n *\n * @private\n */\nexport const VisuallyHiddenModalOverlay = ({\n  visible: visibleExcluded,\n  position: positionExcluded,\n  getRootRef,\n  ...restProps\n}: VisuallyHiddenModalOverlayProps) => {\n  const ref = useContext(ModalRootOverlayContext);\n  return (\n    <div\n      {...restProps}\n      aria-hidden=\"true\"\n      className={styles.host}\n      ref={function handleCurrentRefForForwardContextRef() {\n        setRef(ref.current, getRootRef);\n      }}\n    />\n  );\n};\n"],"names":["useContext","setRef","ModalRootOverlayContext","VisuallyHiddenModalOverlay","visible","visibleExcluded","position","positionExcluded","getRootRef","restProps","ref","div","aria-hidden","className","handleCurrentRefForForwardContextRef","current"],"mappings":"AAAA;;;;;AAEA,SAASA,UAAU,QAAQ,QAAQ;AACnC,SAASC,MAAM,QAAQ,wBAAqB;AAE5C,SAASC,uBAAuB,QAAQ,yBAAsB;AAK9D;;;;;;;;CAQC,GACD,OAAO,MAAMC,6BAA6B;QAAC,EACzCC,SAASC,eAAe,EACxBC,UAAUC,gBAAgB,EAC1BC,UAAU,EAEsB,WAD7BC;QAHHL;QACAE;QACAE;;IAGA,MAAME,MAAMV,WAAWE;IACvB,qBACE,KAACS,+CACKF;QACJG,eAAY;QACZC,SAAS;QACTH,KAAK,SAASI;YACZb,OAAOS,IAAIK,OAAO,EAAEP;QACtB;;AAGN,EAAE"}