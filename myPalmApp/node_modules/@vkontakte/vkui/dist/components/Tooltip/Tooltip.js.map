{"version":3,"sources":["../../../src/components/Tooltip/Tooltip.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { useReferenceElement } from '../../hooks/useReferenceElement';\nimport { type FloatingComponentProps, type OnShownChange } from '../../lib/floating';\nimport { type FloatingArrowProps as FloatingArrowPropsPrivate } from '../FloatingArrow/FloatingArrow';\nimport { type TooltipBaseProps } from '../TooltipBase/TooltipBase';\nimport { useTooltip } from './useTooltip';\n\ntype AllowedFloatingComponentProps = Pick<\n  FloatingComponentProps,\n  | 'arrowHeight'\n  | 'arrowPadding'\n  | 'hoverDelay'\n  | 'placement'\n  | 'offsetByMainAxis'\n  | 'offsetByCrossAxis'\n  | 'defaultShown'\n  | 'onShownChange'\n  | 'hideWhenReferenceHidden'\n  | 'onReferenceHiddenChange'\n  | 'children'\n  | 'zIndex'\n  | 'usePortal'\n  | 'onPlacementChange'\n  | 'disableFlipMiddleware'\n  | 'strategy'\n>;\n\ntype AllowedTooltipBaseProps = Omit<TooltipBaseProps, 'arrowProps' | 'onCloseIconClick'>;\n\n/**\n * @alias\n * @public\n */\nexport type TooltipArrowProps = Omit<\n  FloatingArrowPropsPrivate,\n  'getRootRef' | 'coords' | 'placement' | 'Icon'\n>;\n\n/**\n * @alias\n * @public\n */\nexport type TooltipOnShownChange = OnShownChange;\n\nexport interface TooltipProps extends AllowedFloatingComponentProps, AllowedTooltipBaseProps {\n  /**\n   * Передача `boolean` позволяет контролировать состояния показа и скрытия вручную. Используйте\n   * совместно с `onShownChange`.\n   *\n   * > Если нужно разово инициировать показ тултипа при первом рендере, то используйте `defaultShown`.\n   */\n  shown?: boolean;\n  /**\n   * Добавляет возможность наводить на тултип.\n   */\n  enableInteractive?: boolean;\n  /**\n   * Добавляет возможность закрыть тултип через иконку-крестик.\n   *\n   * > Работает в сочетании с `enableInteractive` или при использовании `shown` и `onShownChange`.\n   */\n  closable?: boolean;\n  /**\n   * Скрывает стрелку, указывающую на якорный элемент.\n   */\n  disableArrow?: boolean;\n  /**\n   * Отключает закрытие по нажатию.\n   */\n  disableCloseAfterClick?: boolean;\n  /**\n   * Отключает появление при фокусе.\n   */\n  disableTriggerOnFocus?: boolean;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/Tooltip\n */\nexport const Tooltip = ({ children, ...restProps }: TooltipProps): React.ReactNode => {\n  const { anchorRef, anchorProps, tooltip } = useTooltip(restProps);\n\n  const anchor = useReferenceElement(children, anchorProps, anchorRef);\n\n  return (\n    <React.Fragment>\n      {anchor}\n      {tooltip}\n    </React.Fragment>\n  );\n};\n"],"names":["React","useReferenceElement","useTooltip","Tooltip","children","restProps","anchorRef","anchorProps","tooltip","anchor","Fragment"],"mappings":"AAAA;;;AAEA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,mBAAmB,QAAQ,qCAAkC;AAItE,SAASC,UAAU,QAAQ,kBAAe;AAuE1C;;CAEC,GACD,OAAO,MAAMC,UAAU;QAAC,EAAEC,QAAQ,EAA8B,WAAzBC;QAAbD;;IACxB,MAAM,EAAEE,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAE,GAAGN,WAAWG;IAEvD,MAAMI,SAASR,oBAAoBG,UAAUG,aAAaD;IAE1D,qBACE,MAACN,MAAMU,QAAQ;;YACZD;YACAD;;;AAGP,EAAE"}