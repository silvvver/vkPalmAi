{"version":3,"sources":["../../src/hooks/useStateWithPrev.ts"],"sourcesContent":["import * as React from 'react';\n\nfunction basicStateInitializer<S>(initialArg: S | (() => S)): S {\n  return initialArg instanceof Function ? initialArg() : initialArg;\n}\n\nfunction initializer<T>(initialArg: T | (() => T)): [T, T | undefined] {\n  const initialState = basicStateInitializer(initialArg);\n\n  return [initialState, undefined];\n}\n\nfunction basicStateReducer<S>(state: S, action: React.SetStateAction<S>): S {\n  return action instanceof Function ? action(state) : action;\n}\n\nfunction reducer<T>(\n  [prevState]: [T, T | undefined],\n  action: React.SetStateAction<T>,\n): [T, T | undefined] {\n  const newState = basicStateReducer(prevState, action);\n\n  return [newState, prevState];\n}\n\n/**\n * Возвращает значение с текущим и предыдущим состоянием\n *\n * # Пример\n *\n * ```ts\n * const [[count, prevCount], setCount] = useStateWithPrev(initialState);\n * ```\n */\nexport function useStateWithPrev<T>(\n  initialState: T | (() => T),\n): [[T, T | undefined], React.Dispatch<React.SetStateAction<T>>] {\n  return React.useReducer(reducer, undefined, () => initializer(initialState));\n}\n"],"names":["React","basicStateInitializer","initialArg","Function","initializer","initialState","undefined","basicStateReducer","state","action","reducer","prevState","newState","useStateWithPrev","useReducer"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAE/B,SAASC,sBAAyBC,UAAyB;IACzD,OAAOA,sBAAsBC,WAAWD,eAAeA;AACzD;AAEA,SAASE,YAAeF,UAAyB;IAC/C,MAAMG,eAAeJ,sBAAsBC;IAE3C,OAAO;QAACG;QAAcC;KAAU;AAClC;AAEA,SAASC,kBAAqBC,KAAQ,EAAEC,MAA+B;IACrE,OAAOA,kBAAkBN,WAAWM,OAAOD,SAASC;AACtD;AAEA,SAASC,QACP,CAACC,UAA8B,EAC/BF,MAA+B;IAE/B,MAAMG,WAAWL,kBAAkBI,WAAWF;IAE9C,OAAO;QAACG;QAAUD;KAAU;AAC9B;AAEA;;;;;;;;CAQC,GACD,OAAO,SAASE,iBACdR,YAA2B;IAE3B,OAAOL,MAAMc,UAAU,CAACJ,SAASJ,WAAW,IAAMF,YAAYC;AAChE"}