{"version":3,"sources":["../../../src/hooks/useAdaptivityConditionalRender/useAdaptivityConditionalRender.tsx"],"sourcesContent":["import * as React from 'react';\nimport { AdaptivityContext } from '../../components/AdaptivityProvider/AdaptivityContext';\nimport { usePlatform } from '../usePlatform';\nimport {\n  deviceTypeMediaQueryMapProps,\n  sizeXCompactMediaQueryProps,\n  sizeXRegularMediaQueryProps,\n  sizeYCompactMediaQueryProps,\n  sizeYRegularMediaQueryProps,\n  viewWidthMediaQueryMapProps,\n} from './constants';\nimport { getAdaptiveDeviceType, getAdaptiveSizeType, getAdaptiveViewWidth } from './helpers';\nimport type { UseAdaptivityConditionalRender } from './types';\n\nexport const useAdaptivityConditionalRender = (): UseAdaptivityConditionalRender => {\n  const {\n    sizeX: sizeXContext,\n    sizeY: sizeYContext,\n    viewWidth: viewWidthContext,\n    viewHeight: viewHeightContext,\n    hasPointer: hasPointerContext,\n  } = React.useContext(AdaptivityContext);\n  const platform = usePlatform();\n\n  return React.useMemo(() => {\n    const sizeX = getAdaptiveSizeType(\n      sizeXContext,\n      sizeXCompactMediaQueryProps,\n      sizeXRegularMediaQueryProps,\n    );\n    const sizeY = getAdaptiveSizeType(\n      sizeYContext,\n      sizeYCompactMediaQueryProps,\n      sizeYRegularMediaQueryProps,\n    );\n    const viewWidth = getAdaptiveViewWidth(viewWidthContext, viewWidthMediaQueryMapProps);\n    const deviceType = getAdaptiveDeviceType(\n      viewWidthContext,\n      viewHeightContext,\n      hasPointerContext,\n      platform,\n      deviceTypeMediaQueryMapProps,\n    );\n    return {\n      sizeX,\n      sizeY,\n      viewWidth,\n      deviceType,\n    };\n  }, [\n    sizeXContext,\n    sizeYContext,\n    viewWidthContext,\n    viewHeightContext,\n    hasPointerContext,\n    platform,\n  ]);\n};\n"],"names":["React","AdaptivityContext","usePlatform","deviceTypeMediaQueryMapProps","sizeXCompactMediaQueryProps","sizeXRegularMediaQueryProps","sizeYCompactMediaQueryProps","sizeYRegularMediaQueryProps","viewWidthMediaQueryMapProps","getAdaptiveDeviceType","getAdaptiveSizeType","getAdaptiveViewWidth","useAdaptivityConditionalRender","sizeX","sizeXContext","sizeY","sizeYContext","viewWidth","viewWidthContext","viewHeight","viewHeightContext","hasPointer","hasPointerContext","useContext","platform","useMemo","deviceType"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,iBAAiB,QAAQ,2DAAwD;AAC1F,SAASC,WAAW,QAAQ,oBAAiB;AAC7C,SACEC,4BAA4B,EAC5BC,2BAA2B,EAC3BC,2BAA2B,EAC3BC,2BAA2B,EAC3BC,2BAA2B,EAC3BC,2BAA2B,QACtB,iBAAc;AACrB,SAASC,qBAAqB,EAAEC,mBAAmB,EAAEC,oBAAoB,QAAQ,eAAY;AAG7F,OAAO,MAAMC,iCAAiC;IAC5C,MAAM,EACJC,OAAOC,YAAY,EACnBC,OAAOC,YAAY,EACnBC,WAAWC,gBAAgB,EAC3BC,YAAYC,iBAAiB,EAC7BC,YAAYC,iBAAiB,EAC9B,GAAGtB,MAAMuB,UAAU,CAACtB;IACrB,MAAMuB,WAAWtB;IAEjB,OAAOF,MAAMyB,OAAO,CAAC;QACnB,MAAMZ,QAAQH,oBACZI,cACAV,6BACAC;QAEF,MAAMU,QAAQL,oBACZM,cACAV,6BACAC;QAEF,MAAMU,YAAYN,qBAAqBO,kBAAkBV;QACzD,MAAMkB,aAAajB,sBACjBS,kBACAE,mBACAE,mBACAE,UACArB;QAEF,OAAO;YACLU;YACAE;YACAE;YACAS;QACF;IACF,GAAG;QACDZ;QACAE;QACAE;QACAE;QACAE;QACAE;KACD;AACH,EAAE"}