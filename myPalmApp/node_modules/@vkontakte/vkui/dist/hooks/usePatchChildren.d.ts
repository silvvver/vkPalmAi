import * as React from 'react';
import type { HasRootRef } from '../types';
type InjectProps<T> = Omit<React.HTMLAttributes<T>, keyof React.DOMAttributes<T>> & React.Attributes & {
    ref?: React.Ref<T>;
};
type ExpectedReactElement<T> = React.ReactElement<HasRootRef<T> & React.DOMAttributes<T>>;
type ChildrenElement<T> = ExpectedReactElement<T> | React.ReactNode;
/**
 * –•—É–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–ø–∞—Ç—á–∏—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –µ–≥–æ
 * DOM-—ç–ª–µ–º–µ–Ω—Ç. –¢–∞–∫–∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–∫–∏–Ω—É—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
 *
 * @param children
 * @param injectProps
 * @param externRef ‚Äì –ø–æ–ª–µ–∑–µ–Ω –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∫–∏–Ω—É—Ç—å `ref` —ç–ª–µ–º–µ–Ω—Ç—É –≤—ã—à–µ.
 *
 * üëé –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `externRef`
 * ```ts
 * const { ref } = useSomeHook();
 * const [childRef, child] = usePatchChildren(children);
 * React.useLayoutEffect(() => {
 *   ref.current = childRef.current; // –∏–ª–∏ ref.current(childRef.current)
 * }, [childRef]);
 * ```
 *
 * üëç –° –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º `externRef`
 * ```ts
 * const { ref } = useSomeHook();
 * const [childRef, child] = usePatchChildren(children, undefined, ref);
 * ```
 */
export declare const usePatchChildren: <ElementType extends HTMLElement = HTMLElement>(children?: ChildrenElement<ElementType>, injectProps?: InjectProps<ElementType>, externRef?: React.Ref<ElementType>) => [React.RefObject<ElementType | null>, ChildrenElement<ElementType> | undefined];
export {};
//# sourceMappingURL=usePatchChildren.d.ts.map