{"version":3,"sources":["../../src/hooks/useFocusTrap.ts"],"sourcesContent":["import { type RefObject, useRef, useState } from 'react';\nimport { arraysEquals } from '../helpers/array';\nimport { FOCUSABLE_ELEMENTS_LIST, Keys, pressedKey } from '../lib/accessibility';\nimport {\n  contains,\n  getActiveElementByAnotherElement,\n  getWindow,\n  isHTMLElement,\n  useDOM,\n} from '../lib/dom';\nimport { useIsomorphicLayoutEffect } from '../lib/useIsomorphicLayoutEffect';\nimport { useMutationObserver } from './useMutationObserver';\nimport { useStableCallback } from './useStableCallback';\n\nconst useRestoreFocus = ({\n  restoreFocus,\n  timeout,\n  mount,\n  ref,\n}: Pick<UseFocusTrapProps, 'restoreFocus' | 'timeout' | 'mount'> & {\n  ref: RefObject<HTMLElement | null>;\n}) => {\n  const restoreFocusRef = useRef(restoreFocus);\n  restoreFocusRef.current = restoreFocus;\n  const [restoreFocusTo, setRestoreFocusTo] = useState<Element | null>(null);\n\n  const restoreFocusImpl = useStableCallback(() => {\n    const shouldRestoreFocus =\n      typeof restoreFocusRef.current === 'function'\n        ? restoreFocusRef.current()\n        : restoreFocusRef.current;\n\n    if (!shouldRestoreFocus) {\n      return;\n    }\n\n    setTimeout(() => {\n      const restoreFocusElement =\n        (isHTMLElement(shouldRestoreFocus) && shouldRestoreFocus) ||\n        (isHTMLElement(restoreFocusTo) && restoreFocusTo) ||\n        null;\n\n      if (restoreFocusElement) {\n        restoreFocusElement.focus();\n        setRestoreFocusTo(null);\n      }\n    }, timeout);\n  });\n\n  useIsomorphicLayoutEffect(\n    function calculateRestoreFocusTo() {\n      if (!ref.current || !restoreFocusRef.current || !mount) {\n        setRestoreFocusTo(null);\n        return;\n      }\n      setRestoreFocusTo(getActiveElementByAnotherElement(ref.current));\n    },\n    [ref, mount],\n  );\n\n  useIsomorphicLayoutEffect(\n    function tryToRestoreFocusOnUnmount() {\n      return () => {\n        restoreFocusImpl();\n      };\n    },\n    [restoreFocusImpl],\n  );\n\n  useIsomorphicLayoutEffect(\n    function tryToRestoreFocusWhenFakeUnmount() {\n      if (!mount) {\n        restoreFocusImpl();\n      }\n    },\n    [mount, restoreFocusImpl],\n  );\n};\n\nconst FOCUSABLE_ELEMENTS: string = FOCUSABLE_ELEMENTS_LIST.join();\n\nexport type UseFocusTrapProps = {\n  /**\n   * @default true\n   */\n  mount?: boolean;\n  /**\n   * Форсированное отключение захвата фокуса\n   *\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * @default true\n   */\n  autoFocus?: boolean | 'root';\n  /**\n   * @default true\n   */\n  restoreFocus?: boolean | (() => boolean | HTMLElement);\n  /**\n   * @default 0\n   */\n  timeout?: number;\n  /**\n   * Вызывается при нажатии на кнопку `Escape`.\n   */\n  onClose?: VoidFunction;\n  /**\n   * Следует ли обрабатываеть событие нажатия клавиши Escape при \"погружении\", то есть\n   * до того как это событие будет обработано на EventTarget\n   * Удобно установить в false, если требуется запретить \"всплытие\" события до FocusTrap\n   *\n   * @default true\n   */\n  captureEscapeKeyboardEvent?: boolean;\n};\n\n/**\n * @private\n */\nexport const useFocusTrap = (\n  ref: RefObject<HTMLElement | null>,\n  {\n    mount = true,\n    disabled = false,\n    autoFocus = true,\n    restoreFocus = true,\n    timeout = 0,\n    onClose,\n    captureEscapeKeyboardEvent = true,\n  }: UseFocusTrapProps,\n) => {\n  const { document } = useDOM();\n\n  const focusableNodesRef = useRef<HTMLElement[]>([]);\n\n  const focusNodeByIndex = (nodeIndex: number) => {\n    const element = focusableNodesRef.current[nodeIndex];\n\n    if (element) {\n      element.focus({\n        preventScroll: true,\n      });\n    }\n  };\n\n  useRestoreFocus({\n    restoreFocus,\n    mount,\n    timeout,\n    ref,\n  });\n\n  const recalculateFocusableNodesRef = (parentNode: HTMLElement) => {\n    // eslint-disable-next-line no-restricted-properties\n    const newFocusableElements = parentNode.querySelectorAll<HTMLElement>(FOCUSABLE_ELEMENTS);\n\n    const nodes: HTMLElement[] = [];\n    newFocusableElements.forEach((focusableEl) => {\n      const { display, visibility } = getComputedStyle(focusableEl);\n      if (display !== 'none' && visibility !== 'hidden') {\n        nodes.push(focusableEl);\n      }\n    });\n    if (nodes.length === 0) {\n      // Чтобы фокус был хотя бы на родителе\n      nodes.push(parentNode);\n    }\n    focusableNodesRef.current = nodes;\n  };\n\n  const onMutateParentHandler = (parentNode: HTMLElement) => {\n    const oldFocusableNodes = [...focusableNodesRef.current];\n\n    recalculateFocusableNodesRef(parentNode);\n\n    if (disabled || !autoFocus || arraysEquals(oldFocusableNodes, focusableNodesRef.current)) {\n      return;\n    }\n\n    if (document) {\n      const activeElement = document.activeElement as HTMLElement;\n      const currentElementIndex = Math.max(\n        document.activeElement ? focusableNodesRef.current.indexOf(activeElement) : -1,\n        0,\n      );\n      focusNodeByIndex(currentElementIndex);\n    }\n  };\n\n  useMutationObserver(ref, () => ref.current && onMutateParentHandler(ref.current));\n\n  useIsomorphicLayoutEffect(() => {\n    ref.current && recalculateFocusableNodesRef(ref.current);\n  }, [ref]);\n\n  useIsomorphicLayoutEffect(\n    function tryToAutoFocusToFirstNode() {\n      if (!ref.current || !autoFocus || disabled) {\n        return;\n      }\n\n      const autoFocusToNode = () => {\n        if (!ref.current || !focusableNodesRef.current.length) {\n          return;\n        }\n        const activeElement = getActiveElementByAnotherElement(ref.current);\n        if (!contains(ref.current, activeElement)) {\n          if (autoFocus === 'root') {\n            ref.current?.focus();\n          } else {\n            focusableNodesRef.current[0].focus();\n          }\n        }\n      };\n      const timeoutId = setTimeout(autoFocusToNode, timeout);\n      return () => {\n        clearTimeout(timeoutId);\n      };\n    },\n    [autoFocus, timeout, disabled],\n  );\n\n  useIsomorphicLayoutEffect(\n    function initializeFocusTrap() {\n      if (!ref.current) {\n        return;\n      }\n\n      const onDocumentKeydown = (event: KeyboardEvent) => {\n        if (disabled) {\n          return;\n        }\n\n        const pressedKeyResult = pressedKey(event);\n\n        switch (pressedKeyResult) {\n          case Keys.TAB: {\n            if (!focusableNodesRef.current.length) {\n              return false;\n            }\n\n            const lastIdx = focusableNodesRef.current.length - 1;\n            const targetIdx = focusableNodesRef.current.findIndex((node) => node === event.target);\n\n            const shouldFocusFirstNode =\n              targetIdx === -1 || (targetIdx === lastIdx && !event.shiftKey);\n\n            if (shouldFocusFirstNode || (targetIdx === 0 && event.shiftKey)) {\n              event.preventDefault();\n\n              const node = focusableNodesRef.current[shouldFocusFirstNode ? 0 : lastIdx];\n\n              if (node !== getActiveElementByAnotherElement(node)) {\n                node.focus();\n              }\n\n              return false;\n            }\n\n            break;\n          }\n        }\n\n        return true;\n      };\n\n      const onEscapeKeydown = (event: KeyboardEvent) => {\n        if (disabled) {\n          return;\n        }\n\n        const pressedKeyResult = pressedKey(event);\n\n        if (pressedKeyResult === Keys.ESCAPE) {\n          if (onClose) {\n            event.preventDefault();\n            onClose();\n          }\n        }\n\n        return true;\n      };\n\n      const doc = getWindow(ref.current).document;\n      doc.addEventListener('keydown', onDocumentKeydown, {\n        capture: true,\n      });\n      doc.addEventListener('keydown', onEscapeKeydown, {\n        capture: captureEscapeKeyboardEvent,\n      });\n      return () => {\n        doc.removeEventListener('keydown', onDocumentKeydown, true);\n        doc.removeEventListener('keydown', onEscapeKeydown, captureEscapeKeyboardEvent);\n      };\n    },\n    [onClose, ref, disabled],\n  );\n};\n"],"names":["useRef","useState","arraysEquals","FOCUSABLE_ELEMENTS_LIST","Keys","pressedKey","contains","getActiveElementByAnotherElement","getWindow","isHTMLElement","useDOM","useIsomorphicLayoutEffect","useMutationObserver","useStableCallback","useRestoreFocus","restoreFocus","timeout","mount","ref","restoreFocusRef","current","restoreFocusTo","setRestoreFocusTo","restoreFocusImpl","shouldRestoreFocus","setTimeout","restoreFocusElement","focus","calculateRestoreFocusTo","tryToRestoreFocusOnUnmount","tryToRestoreFocusWhenFakeUnmount","FOCUSABLE_ELEMENTS","join","useFocusTrap","disabled","autoFocus","onClose","captureEscapeKeyboardEvent","document","focusableNodesRef","focusNodeByIndex","nodeIndex","element","preventScroll","recalculateFocusableNodesRef","parentNode","newFocusableElements","querySelectorAll","nodes","forEach","focusableEl","display","visibility","getComputedStyle","push","length","onMutateParentHandler","oldFocusableNodes","activeElement","currentElementIndex","Math","max","indexOf","tryToAutoFocusToFirstNode","autoFocusToNode","timeoutId","clearTimeout","initializeFocusTrap","onDocumentKeydown","event","pressedKeyResult","TAB","lastIdx","targetIdx","findIndex","node","target","shouldFocusFirstNode","shiftKey","preventDefault","onEscapeKeydown","ESCAPE","doc","addEventListener","capture","removeEventListener"],"mappings":"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"}