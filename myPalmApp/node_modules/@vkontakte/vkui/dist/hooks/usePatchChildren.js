import { _ as _object_spread } from "@swc/helpers/_/_object_spread";
import * as React from "react";
import { getMergedSameEventsByProps } from "../helpers/getMergedSameEventsByProps.js";
import { isDOMTypeElement, isForwardRefElement, isValidNotReactFragmentElement } from "../lib/utils.js";
import { warnOnce } from "../lib/warnOnce.js";
import { useEffectDev } from "./useEffectDev.js";
import { useExternRef } from "./useExternRef.js";
const warn = warnOnce('usePatchChildren');
/**
 * –•—É–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–ø–∞—Ç—á–∏—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –µ–≥–æ
 * DOM-—ç–ª–µ–º–µ–Ω—Ç. –¢–∞–∫–∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–∫–∏–Ω—É—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
 *
 * @param children
 * @param injectProps
 * @param externRef ‚Äì –ø–æ–ª–µ–∑–µ–Ω –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∫–∏–Ω—É—Ç—å `ref` —ç–ª–µ–º–µ–Ω—Ç—É –≤—ã—à–µ.
 *
 * üëé –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `externRef`
 * ```ts
 * const { ref } = useSomeHook();
 * const [childRef, child] = usePatchChildren(children);
 * React.useLayoutEffect(() => {
 *   ref.current = childRef.current; // –∏–ª–∏ ref.current(childRef.current)
 * }, [childRef]);
 * ```
 *
 * üëç –° –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º `externRef`
 * ```ts
 * const { ref } = useSomeHook();
 * const [childRef, child] = usePatchChildren(children, undefined, ref);
 * ```
 */ export const usePatchChildren = (children, injectProps, externRef)=>{
    const isValidElementResult = isValidNotReactFragmentElement(children);
    const isDOMTypeElementResult = isValidElementResult && isDOMTypeElement(children);
    const isForwardedRefElementResult = isValidElementResult && isForwardRefElement(children);
    const shouldUseRef = isDOMTypeElementResult || isForwardedRefElementResult;
    const childRef = useExternRef(shouldUseRef ? children.ref : isValidElementResult ? children.props.getRootRef : undefined, externRef);
    const mergedEventsByInjectProps = getMergedSameEventsByProps(injectProps ? injectProps : {}, isValidElementResult ? children.props : {});
    const props = shouldUseRef ? _object_spread({
        ref: childRef
    }, injectProps, mergedEventsByInjectProps) : isValidElementResult ? _object_spread({
        getRootRef: childRef
    }, injectProps, mergedEventsByInjectProps) : undefined;
    const patchedChildren = isValidElementResult ? React.cloneElement(children, props) : children;
    useEffectDev(()=>{
        if (!childRef.current && !shouldUseRef) {
            warn('–ö–∞–∂–µ—Ç—Å—è, –≤ children –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ getRootRef. –ú—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π dom-—ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞', 'error');
        }
    }, [
        isValidElementResult ? children.type : null,
        shouldUseRef,
        childRef
    ]);
    return [
        childRef,
        patchedChildren
    ];
};

//# sourceMappingURL=usePatchChildren.js.map