{"version":3,"sources":["../../../../../src/components/Pagination/PaginationPage/PaginationPageButton.tsx"],"sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { type SizeTypeValues } from '../../../lib/adaptivity';\nimport { Tappable, type TappableProps } from '../../Tappable/Tappable';\nimport { Text } from '../../Typography/Text/Text';\nimport { VisuallyHidden } from '../../VisuallyHidden/VisuallyHidden';\nimport type { PaginationProps } from '../Pagination';\nimport { getPaginationPageClassNames } from './usePaginationPageClasses';\nimport styles from './PaginationPage.module.css';\n\nexport interface PaginationPageButtonOpts\n  extends Pick<React.ButtonHTMLAttributes<HTMLButtonElement>, 'onClick' | 'disabled' | 'className'>,\n    Pick<PaginationProps, 'getPageLabel'> {\n  isCurrent?: boolean;\n  sizeY?: SizeTypeValues;\n  children: number;\n}\n\nexport interface PaginationPageButtonProps extends PaginationPageButtonOpts {\n  renderPageButton?: (props: CustomPaginationPageButtonProps) => React.ReactNode;\n}\n\nconst getTappablePropsFromPaginationPage = (\n  opts: PaginationPageButtonOpts,\n): TappableProps & { 'data-page': number } => {\n  const {\n    isCurrent = false,\n    getPageLabel,\n    children,\n    className,\n    disabled,\n    sizeY,\n    ...restProps\n  } = opts;\n\n  const pageClassNames = getPaginationPageClassNames({\n    isCurrent,\n    disabled,\n    sizeY,\n  });\n\n  const pageLabel = getPageLabel?.(isCurrent);\n  return {\n    'className': classNames(pageClassNames, className),\n    'activeMode': styles.stateActive,\n    'hoverMode': styles.stateHover,\n    'focusVisibleMode': 'outside',\n    'aria-current': isCurrent ? true : undefined,\n    'disabled': disabled,\n    'children': (\n      <Text normalize={false}>\n        {pageLabel && <VisuallyHidden>{pageLabel} </VisuallyHidden>}\n        {children}\n      </Text>\n    ),\n    'data-page': children,\n    ...restProps,\n  };\n};\n\nexport type CustomPaginationPageButtonProps = ReturnType<typeof getTappablePropsFromPaginationPage>;\n\nexport const PaginationPageButton = ({\n  renderPageButton,\n  ...restProps\n}: PaginationPageButtonProps): React.ReactNode => {\n  const tappableProps = getTappablePropsFromPaginationPage(restProps);\n\n  if (typeof renderPageButton === 'function') {\n    return renderPageButton(tappableProps);\n  }\n\n  return <Tappable {...tappableProps} />;\n};\n"],"names":["React","classNames","Tappable","Text","VisuallyHidden","getPaginationPageClassNames","styles","getTappablePropsFromPaginationPage","opts","isCurrent","getPageLabel","children","className","disabled","sizeY","restProps","pageClassNames","pageLabel","stateActive","stateHover","undefined","normalize","PaginationPageButton","renderPageButton","tappableProps"],"mappings":"AAAA,sCAAsC;AAEtC,YAAYA,WAAW,QAAQ;AAC/B,SAASC,UAAU,QAAQ,kBAAkB;AAE7C,SAASC,QAAQ,QAA4B,6BAA0B;AACvE,SAASC,IAAI,QAAQ,gCAA6B;AAClD,SAASC,cAAc,QAAQ,yCAAsC;AAErE,SAASC,2BAA2B,QAAQ,gCAA6B;AACzE,OAAOC,YAAY,8BAA8B;AAcjD,MAAMC,qCAAqC,CACzCC;IAEA,MAAM,EACJC,YAAY,KAAK,EACjBC,YAAY,EACZC,QAAQ,EACRC,SAAS,EACTC,QAAQ,EACRC,KAAK,EACL,GAAGC,WACJ,GAAGP;IAEJ,MAAMQ,iBAAiBX,4BAA4B;QACjDI;QACAI;QACAC;IACF;IAEA,MAAMG,YAAYP,eAAeD;IACjC,OAAO;QACL,aAAaR,WAAWe,gBAAgBJ;QACxC,cAAcN,OAAOY,WAAW;QAChC,aAAaZ,OAAOa,UAAU;QAC9B,oBAAoB;QACpB,gBAAgBV,YAAY,OAAOW;QACnC,YAAYP;QACZ,0BACE,MAACV;YAAKkB,WAAW;;gBACdJ,2BAAa,MAACb;;wBAAgBa;wBAAU;;;gBACxCN;;;QAGL,aAAaA;QACb,GAAGI,SAAS;IACd;AACF;AAIA,OAAO,MAAMO,uBAAuB,CAAC,EACnCC,gBAAgB,EAChB,GAAGR,WACuB;IAC1B,MAAMS,gBAAgBjB,mCAAmCQ;IAEzD,IAAI,OAAOQ,qBAAqB,YAAY;QAC1C,OAAOA,iBAAiBC;IAC1B;IAEA,qBAAO,KAACtB;QAAU,GAAGsB,aAAa;;AACpC,EAAE"}