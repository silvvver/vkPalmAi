{"version":3,"sources":["../../../../src/components/ChipsInputBase/ChipsInputBase.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { isHTMLElement } from '@vkontakte/vkui-floating-ui/utils/dom';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { getHorizontalFocusGoTo, Keys } from '../../lib/accessibility';\nimport {\n  contains as checkTargetIsInputEl,\n  contains,\n  getActiveElementByAnotherElement,\n} from '../../lib/dom';\nimport { FormField } from '../FormField/FormField';\nimport { FormFieldClearButton } from '../FormFieldClearButton/FormFieldClearButton';\nimport { Text } from '../Typography/Text/Text';\nimport { DEFAULT_INPUT_VALUE, DEFAULT_VALUE, renderChipDefault } from './constants';\nimport {\n  getChipOptionIndexByHTMLElement,\n  getChipOptionIndexByValueProp,\n  getChipOptionValueByHTMLElement,\n  getNextChipOptionIndexByNavigateToProp,\n  isInputValueEmpty,\n} from './helpers';\nimport type { ChipOption, ChipOptionValue, ChipsInputBasePrivateProps, NavigateTo } from './types';\nimport styles from './ChipsInputBase.module.css';\n\nconst sizeYClassNames = {\n  none: styles.sizeYNone,\n  compact: styles.sizeYCompact,\n} as const;\n\nexport const ChipsInputBase = <O extends ChipOption>({\n  // FormFieldProps\n  getRootRef,\n  style,\n  className,\n  before,\n  after,\n  status,\n  mode,\n  maxHeight,\n\n  // option\n  value = DEFAULT_VALUE,\n  onAddChipOption,\n  onRemoveChipOption: onRemoveChipOptionProp,\n  renderChip = renderChipDefault,\n\n  // input\n  getRef,\n  id: idProp,\n  inputValue = DEFAULT_INPUT_VALUE,\n  placeholder,\n  disabled,\n  readOnly,\n  addOnBlur,\n  onBlur,\n  onInputChange,\n\n  // clear\n  ClearButton = FormFieldClearButton,\n  clearButtonShown,\n  clearButtonTestId,\n  onClear,\n  ...restProps\n}: ChipsInputBasePrivateProps<O>): React.ReactNode => {\n  const { sizeY = 'none' } = useAdaptivity();\n  const idGenerated = React.useId();\n  const inputRef = useExternRef(getRef);\n  const listboxRef = React.useRef<HTMLDivElement>(null);\n\n  const valueLength = value.length;\n  const withPlaceholder = valueLength === 0;\n  const [lastFocusedChipOptionIndex, setLastFocusedChipOptionIndex] = React.useState(0);\n\n  const resetChipOptionFocusToInputEl = (inputEl: HTMLInputElement) => {\n    setLastFocusedChipOptionIndex(0);\n    inputEl.focus();\n  };\n\n  const moveFocusToChipOption = (\n    currentIndex: number,\n    navigateTo: NavigateTo,\n    listboxEl: HTMLElement,\n  ) => {\n    const index = getNextChipOptionIndexByNavigateToProp(currentIndex, navigateTo, valueLength);\n    // eslint-disable-next-line no-restricted-properties\n    const foundEl = listboxEl.querySelector<HTMLElement>(`[data-index=\"${index}\"]`);\n\n    if (foundEl) {\n      setLastFocusedChipOptionIndex(index);\n      foundEl.focus();\n    }\n  };\n\n  const removeChipOption = (o: O | ChipOptionValue, index: number) => {\n    /* istanbul ignore if: невозможный кейс (в SSR вызова этой функции не будет) */\n    if (!inputRef.current || !listboxRef.current) {\n      return;\n    }\n\n    if (valueLength > 1) {\n      if (index === valueLength - 1) {\n        moveFocusToChipOption(index, 'prev', listboxRef.current);\n      } else {\n        moveFocusToChipOption(index, 'next', listboxRef.current);\n      }\n    } else {\n      resetChipOptionFocusToInputEl(inputRef.current);\n    }\n\n    onRemoveChipOptionProp(o);\n  };\n\n  const handleListboxKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    const targetEl = event.target;\n    /* istanbul ignore if: невозможный кейс (в SSR вызова этой функции не будет) */\n    if (event.defaultPrevented || !listboxRef.current || !isHTMLElement(targetEl)) {\n      return;\n    }\n\n    switch (event.key) {\n      case Keys.ENTER: {\n        if (\n          !readOnly &&\n          checkTargetIsInputEl(targetEl, inputRef.current) &&\n          inputRef.current &&\n          !isInputValueEmpty(inputRef.current)\n        ) {\n          event.preventDefault();\n          onAddChipOption(inputRef.current.value);\n        }\n        break;\n      }\n      case Keys.DELETE:\n      case Keys.BACKSPACE: {\n        if (!readOnly && valueLength > 0) {\n          if (!checkTargetIsInputEl(targetEl, inputRef.current)) {\n            event.preventDefault();\n            removeChipOption(\n              getChipOptionValueByHTMLElement(targetEl),\n              getChipOptionIndexByHTMLElement(targetEl),\n            );\n          } else if (event.key === Keys.BACKSPACE && isInputValueEmpty(inputRef.current)) {\n            event.preventDefault();\n            moveFocusToChipOption(\n              getChipOptionIndexByHTMLElement(targetEl),\n              'last',\n              listboxRef.current,\n            );\n          }\n        }\n        break;\n      }\n      case Keys.ARROW_UP:\n      case Keys.ARROW_LEFT:\n      case Keys.ARROW_DOWN:\n      case Keys.ARROW_RIGHT: {\n        if (valueLength !== 0 && !checkTargetIsInputEl(targetEl, inputRef.current)) {\n          event.preventDefault();\n          moveFocusToChipOption(\n            getChipOptionIndexByHTMLElement(targetEl),\n            getHorizontalFocusGoTo(event.key),\n            listboxRef.current,\n          );\n        }\n        break;\n      }\n    }\n  };\n\n  const handleInputBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (addOnBlur && !event.defaultPrevented && inputRef.current) {\n      onAddChipOption(inputRef.current.value);\n    }\n  };\n\n  const handleChipRemove = (event: React.MouseEvent, v: ChipOptionValue) => {\n    event.preventDefault();\n    event.stopPropagation();\n    removeChipOption(v, getChipOptionIndexByValueProp(v, value));\n  };\n\n  const handleRootClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (\n      event.defaultPrevented ||\n      contains(event.currentTarget, getActiveElementByAnotherElement(event.currentTarget))\n    ) {\n      return;\n    }\n\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  const clearButton = React.useMemo(() => {\n    if (clearButtonShown) {\n      return <ClearButton onClick={onClear} disabled={disabled} data-testid={clearButtonTestId} />;\n    }\n    return undefined;\n  }, [ClearButton, clearButtonShown, clearButtonTestId, disabled, onClear]);\n\n  const afterItems = React.useMemo(() => {\n    if (clearButton || after) {\n      return (\n        <>\n          {clearButton}\n          {after}\n        </>\n      );\n    }\n    return undefined;\n  }, [after, clearButton]);\n\n  return (\n    <FormField\n      Component=\"div\"\n      getRootRef={getRootRef}\n      style={style}\n      disabled={disabled}\n      before={before}\n      after={afterItems}\n      status={status}\n      mode={mode}\n      className={className}\n      maxHeight={maxHeight}\n      onClick={disabled ? undefined : handleRootClick}\n    >\n      <div\n        className={classNames(\n          styles.host,\n          sizeY !== 'regular' && sizeYClassNames[sizeY],\n          withPlaceholder && styles.hasPlaceholder,\n        )}\n        // для a11y\n        ref={listboxRef}\n        role=\"listbox\"\n        aria-orientation=\"horizontal\"\n        aria-disabled={disabled}\n        aria-readonly={readOnly}\n        onKeyDown={disabled ? undefined : handleListboxKeyDown}\n      >\n        {value.map((option, index) => (\n          <React.Fragment key={`${typeof option.value}-${option.value}`}>\n            {renderChip(\n              {\n                'Component': 'div',\n                'value': option.value,\n                'label': option.label,\n                'disabled': option.disabled || disabled,\n                'readOnly': option.readOnly || readOnly,\n                'className': styles.chip,\n                'onRemove': handleChipRemove,\n                // чтобы можно было легче найти этот чип в DOM\n                'data-index': index,\n                'data-value': option.value,\n                'data-value-type': typeof option.value,\n                // для a11y\n                'tabIndex': lastFocusedChipOptionIndex === index ? 0 : -1,\n                'role': 'option',\n                'aria-selected': true,\n                'aria-posinset': index + 1,\n                'aria-setsize': valueLength,\n              },\n              option,\n            )}\n          </React.Fragment>\n        ))}\n        <Text\n          autoCapitalize=\"none\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck={false}\n          {...restProps}\n          Component=\"input\"\n          type=\"text\"\n          id={idProp || `chips-input-base-generated-id-${idGenerated}`}\n          getRootRef={inputRef}\n          className={styles.el}\n          disabled={disabled}\n          readOnly={readOnly}\n          placeholder={withPlaceholder ? placeholder : undefined}\n          value={inputValue}\n          onChange={onInputChange}\n          onBlur={handleInputBlur}\n        />\n      </div>\n    </FormField>\n  );\n};\n"],"names":["React","classNames","isHTMLElement","useAdaptivity","useExternRef","getHorizontalFocusGoTo","Keys","contains","checkTargetIsInputEl","getActiveElementByAnotherElement","FormField","FormFieldClearButton","Text","DEFAULT_INPUT_VALUE","DEFAULT_VALUE","renderChipDefault","getChipOptionIndexByHTMLElement","getChipOptionIndexByValueProp","getChipOptionValueByHTMLElement","getNextChipOptionIndexByNavigateToProp","isInputValueEmpty","styles","sizeYClassNames","none","sizeYNone","compact","sizeYCompact","ChipsInputBase","getRootRef","style","className","before","after","status","mode","maxHeight","value","onAddChipOption","onRemoveChipOption","onRemoveChipOptionProp","renderChip","getRef","id","idProp","inputValue","placeholder","disabled","readOnly","addOnBlur","onBlur","onInputChange","ClearButton","clearButtonShown","clearButtonTestId","onClear","restProps","sizeY","idGenerated","useId","inputRef","listboxRef","useRef","valueLength","length","withPlaceholder","lastFocusedChipOptionIndex","setLastFocusedChipOptionIndex","useState","resetChipOptionFocusToInputEl","inputEl","focus","moveFocusToChipOption","currentIndex","navigateTo","listboxEl","index","foundEl","querySelector","removeChipOption","o","current","handleListboxKeyDown","event","targetEl","target","defaultPrevented","key","ENTER","preventDefault","DELETE","BACKSPACE","ARROW_UP","ARROW_LEFT","ARROW_DOWN","ARROW_RIGHT","handleInputBlur","handleChipRemove","v","stopPropagation","handleRootClick","currentTarget","clearButton","useMemo","onClick","data-testid","undefined","afterItems","Component","div","host","hasPlaceholder","ref","role","aria-orientation","aria-disabled","aria-readonly","onKeyDown","map","option","Fragment","label","chip","autoCapitalize","autoComplete","autoCorrect","spellCheck","type","el","onChange"],"mappings":"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"}