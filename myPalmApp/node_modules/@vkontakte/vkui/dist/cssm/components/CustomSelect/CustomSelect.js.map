{"version":3,"sources":["../../../../src/components/CustomSelect/CustomSelect.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { classNames, debounce } from '@vkontakte/vkjs';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { useFocusWithin } from '../../hooks/useFocusWithin';\nimport { useStateWithPrev } from '../../hooks/useStateWithPrev';\nimport { callMultiple } from '../../lib/callMultiple';\nimport { useDOM } from '../../lib/dom';\nimport type { Placement } from '../../lib/floating';\nimport { defaultFilterFn, type FilterFn } from '../../lib/select';\nimport { useIsomorphicLayoutEffect } from '../../lib/useIsomorphicLayoutEffect';\nimport { warnOnce } from '../../lib/warnOnce';\nimport {\n  CustomSelectDropdown,\n  type CustomSelectDropdownProps,\n} from '../CustomSelectDropdown/CustomSelectDropdown';\nimport {\n  CustomSelectOption,\n  type CustomSelectOptionProps,\n} from '../CustomSelectOption/CustomSelectOption';\nimport { DropdownIcon } from '../DropdownIcon/DropdownIcon';\nimport type { FormFieldProps } from '../FormField/FormField';\nimport {\n  NOT_SELECTED,\n  remapFromNativeValueToSelectValue,\n  remapFromSelectValueToNativeValue,\n} from '../NativeSelect/NativeSelect';\nimport type {\n  NativeSelectProps,\n  NativeSelectValue,\n  SelectValue,\n} from '../NativeSelect/NativeSelect';\nimport type { SelectType } from '../Select/Select';\nimport { Footnote } from '../Typography/Footnote/Footnote';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden';\nimport {\n  CustomSelectClearButton,\n  type CustomSelectClearButtonProps,\n} from './CustomSelectClearButton';\nimport {\n  CustomSelectInput,\n  type CustomSelectInputProps,\n} from './CustomSelectInput/CustomSelectInput';\nimport styles from './CustomSelect.module.css';\n\nconst sizeYClassNames = {\n  none: styles.sizeYNone,\n  compact: styles.sizeYCompact,\n};\n\nconst findIndexAfter = (options: CustomSelectOptionInterface[] = [], startIndex = -1) => {\n  if (startIndex >= options.length - 1) {\n    return -1;\n  }\n  return options.findIndex((option, i) => i > startIndex && !option.disabled);\n};\n\nconst findIndexBefore = (\n  options: CustomSelectOptionInterface[] = [],\n  endIndex: number = options.length,\n) => {\n  let result = -1;\n  if (endIndex <= 0) {\n    return result;\n  }\n  for (let i = endIndex - 1; i >= 0; i--) {\n    let option = options[i];\n\n    if (!option.disabled) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\nconst warn = warnOnce('CustomSelect');\n\nconst checkOptionsValueType = <T extends CustomSelectOptionInterface>(options: T[]) => {\n  if (new Set(options.map((item) => typeof item.value)).size > 1) {\n    warn(\n      'Некоторые значения ваших опций имеют разные типы. onChange всегда возвращает строковый тип.',\n      'error',\n    );\n  }\n};\n\nconst checkMixControlledAndUncontrolledState = (\n  oldIsControlled: boolean,\n  newIsControlled: boolean,\n) => {\n  if (!oldIsControlled && newIsControlled) {\n    warn(\n      `Похоже, что компонент был переведен из состояния Uncontrolled в Controlled. Пожалуйста, не делайте так. Если вам нужно отобразить невыбранное состояние компонента, используйте value=null вместо undefined`,\n      'error',\n    );\n  }\n  if (oldIsControlled && !newIsControlled) {\n    warn(\n      `Похоже, что компонент был переведен из состояния Controlled в Uncontrolled. Пожалуйста, не делайте так. Если вам нужно отобразить невыбранное состояние компонента, используйте value=null вместо undefined`,\n      'error',\n    );\n  }\n};\n\nfunction defaultRenderOptionFn<T extends CustomSelectOptionInterface>({\n  option,\n  ...props\n}: CustomSelectRenderOption<T>): React.ReactNode {\n  return <CustomSelectOption {...props} />;\n}\n\nconst handleOptionDown: MouseEventHandler = (e: React.MouseEvent<HTMLElement>) => {\n  e.preventDefault();\n};\n\nfunction findSelectedIndex<T extends CustomSelectOptionInterface>(\n  options: T[] = [],\n  value: SelectValue,\n) {\n  if (value === NOT_SELECTED.CUSTOM) {\n    return -1;\n  }\n  return (\n    options.findIndex((item) => {\n      value = typeof item.value === 'number' ? Number(value) : value;\n      return item.value === value;\n    }) ?? -1\n  );\n}\n\nconst filter = <T extends CustomSelectOptionInterface>(\n  options: SelectProps<T>['options'],\n  inputValue: string,\n  filterFn: SelectProps<T>['filterFn'],\n) => {\n  return typeof filterFn === 'function'\n    ? options.filter((option) => filterFn(inputValue, option))\n    : options;\n};\n\n/* eslint-disable jsdoc/require-jsdoc */\ntype MousePosition = {\n  x: React.MouseEvent['clientX'];\n  y: React.MouseEvent['clientY'];\n};\n/* eslint-enable jsdoc/require-jsdoc */\n\nfunction isMousePositionChanged(event: React.MouseEvent, prevPosition: MousePosition) {\n  return (\n    Math.abs(prevPosition.x - event.clientX) >= 1 || Math.abs(prevPosition.y - event.clientY) >= 1\n  );\n}\n\nexport interface CustomSelectOptionInterface {\n  /**\n   * Значение.\n   */\n  value: Exclude<SelectValue, null>;\n  /**\n   * Отображаемый текст.\n   */\n  label: React.ReactElement | string;\n  /**\n   * Блокировка взаимодействия с компонентом.\n   */\n  disabled?: boolean;\n  [index: string]: any;\n}\n\nexport interface CustomSelectRenderOption<T extends CustomSelectOptionInterface>\n  extends CustomSelectOptionProps {\n  /**\n   * Данные об опции.\n   */\n  option: T;\n}\n\nexport type { CustomSelectClearButtonProps };\n\nexport interface SelectProps<\n  OptionInterfaceT extends CustomSelectOptionInterface = CustomSelectOptionInterface,\n> extends NativeSelectProps,\n    Omit<FormFieldProps, 'maxHeight'>,\n    Pick<CustomSelectDropdownProps, 'overscrollBehavior'>,\n    Pick<CustomSelectInputProps, 'minLength' | 'maxLength' | 'pattern' | 'readOnly'> {\n  /**\n   * Ref на внутрений компонент input.\n   */\n  getSelectInputRef?: React.Ref<HTMLInputElement>;\n  /**\n   * Если `true`, то при нажатии на `CustomSelect` в нём появится текстовое поле для поиска по `options`. По умолчанию поиск\n   * производится по `option.label`.\n   */\n  searchable?: boolean;\n  /**\n   * Текст, который будет отображен, если приходит пустой `options`.\n   */\n  emptyText?: string;\n  /**\n   * Событие изменения текстового поля.\n   */\n  onInputChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  /**\n   * Список опций в списке.\n   */\n  options: OptionInterfaceT[];\n  /**\n   * Функция для кастомной фильтрации. По умолчанию поиск производится по `option.label`.\n   */\n  filterFn?: false | FilterFn<OptionInterfaceT>;\n  /**\n   * Направление раскрытия выпадающего списка.\n   */\n  popupDirection?: 'top' | 'bottom';\n  /**\n   * Рендер-проп для кастомного рендера опции.\n   * В объекте аргумента приходят [свойства опции](https://vkcom.github.io/VKUI/#/CustomSelectOption?id=props).\n   *\n   * > ⚠️  Важно: cвойство опции `disabled` должно выставляться только через проп `options`.\n   * > Запрещается выставлять `disabled` проп опциям в обход `options`, иначе `CustomSelect` не будет знать об актуальном состоянии\n   * опции.\n   */\n  renderOption?: (props: CustomSelectRenderOption<OptionInterfaceT>) => React.ReactNode;\n  /**\n   * Рендер-проп для кастомного рендера содержимого дропдауна.\n   * В `defaultDropdownContent` содержится список опций в виде скроллящегося блока.\n   */\n  renderDropdown?: ({\n    defaultDropdownContent,\n  }: {\n    defaultDropdownContent: React.ReactNode;\n  }) => React.ReactNode;\n  /**\n   * Если `true`, то в дропдауне вместо списка опций рисуется спиннер. При переданных `renderDropdown` и `fetching: true`\n   * \"победит\" `renderDropdown`.\n   */\n  fetching?: boolean;\n  /**\n   * Обработчик закрытия выпадающего списка.\n   */\n  onClose?: VoidFunction;\n  /**\n   * Обработчик открытия выпадающего списка.\n   */\n  onOpen?: VoidFunction;\n  /**\n   * Иконка раскрывающегося списка.\n   */\n  icon?: React.ReactNode;\n  /**\n   * Кастомная кнопка для очистки значения.\n   * Должна принимать обязательное свойство `onClick`.\n   */\n  ClearButton?: React.ComponentType<CustomSelectClearButtonProps>;\n  /**\n   * Если `true`, то справа будет отображаться кнопка для очистки значения.\n   */\n  allowClearButton?: boolean;\n  /**\n   * Передает атрибут `data-testid` для кнопки очистки.\n   */\n  clearButtonTestId?: string;\n  /**\n   * Отступ от выпадающего списка.\n   */\n  dropdownOffsetDistance?: number;\n  /**\n   * Ширина раскрывающегося списка зависит от контента.\n   */\n  dropdownAutoWidth?: boolean;\n  /**\n   * Использовать Portal для рендеринга выпадающего списка.\n   */\n  forceDropdownPortal?: boolean;\n  /**\n   * Тип отображения компонента.\n   */\n  selectType?: SelectType;\n  /**\n   * Отключает максимальную высоту по умолчанию.\n   */\n  noMaxHeight?: boolean;\n  /**\n   * Передает атрибут `data-testid` для элемента, внутри которого отображается текст выбранной опции `CustomSelect` или плейсхолдер.\n   */\n  labelTextTestId?: string;\n  /**\n   * Передает атрибут `data-testid` для нативного элемента `select`.\n   */\n  nativeSelectTestId?: string;\n  /**\n   * Обработчик события `keyDown` в поле ввода.\n   */\n  onInputKeyDown?: (e: React.KeyboardEvent, isOpen: boolean) => void;\n}\n\ntype MouseEventHandler = (event: React.MouseEvent<HTMLElement>) => void;\n\n/**\n * @see https://vkcom.github.io/VKUI/#/CustomSelect\n */\nexport function CustomSelect<OptionInterfaceT extends CustomSelectOptionInterface>(\n  props: SelectProps<OptionInterfaceT>,\n): React.ReactNode {\n  const [opened, setOpened] = React.useState(false);\n  const {\n    before,\n    name,\n    className,\n    getRef,\n    getRootRef,\n    popupDirection = 'bottom',\n    style,\n    onChange,\n    children,\n    'onInputChange': onInputChangeProp,\n    renderDropdown,\n    onOpen,\n    onClose,\n    fetching,\n    forceDropdownPortal,\n    selectType = 'default',\n    searchable = false,\n    'renderOption': renderOptionProp = defaultRenderOptionFn,\n    'options': optionsProp,\n    emptyText = 'Ничего не найдено',\n    filterFn = defaultFilterFn,\n    'icon': iconProp,\n    ClearButton = CustomSelectClearButton,\n    allowClearButton = false,\n    dropdownOffsetDistance = 0,\n    dropdownAutoWidth = false,\n    noMaxHeight = false,\n    'aria-labelledby': ariaLabelledBy,\n    clearButtonTestId,\n    nativeSelectTestId,\n    defaultValue,\n    required,\n    getSelectInputRef,\n    overscrollBehavior,\n    onInputKeyDown,\n    ...restProps\n  } = props;\n\n  if (process.env.NODE_ENV === 'development') {\n    checkOptionsValueType(optionsProp);\n  }\n\n  const { sizeY = 'none' } = useAdaptivity();\n\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const handleRootRef = useExternRef(containerRef, getRootRef);\n  const scrollBoxRef = React.useRef<HTMLDivElement | null>(null);\n  const selectElRef = useExternRef(getRef);\n  const optionsWrapperRef = React.useRef<HTMLDivElement>(null);\n  const scrollPerformedRef = React.useRef(false);\n\n  const [focusedOptionIndex, setFocusedOptionIndex] = React.useState<number | undefined>(-1);\n  const [isControlledOutside, setIsControlledOutside] = React.useState(props.value !== undefined);\n  const [inputValue, setInputValue] = React.useState('');\n  const [[nativeSelectValue, prevNativeSelectValue], setNativeSelectValue] =\n    useStateWithPrev<NativeSelectValue>(() => {\n      if (props.value !== undefined) {\n        return remapFromSelectValueToNativeValue(props.value);\n      }\n      if (defaultValue !== undefined) {\n        return remapFromSelectValueToNativeValue(defaultValue);\n      }\n      return NOT_SELECTED.NATIVE;\n    });\n\n  const [popperPlacement, setPopperPlacement] = React.useState<Placement>(popupDirection);\n\n  const options = React.useMemo(() => {\n    return filter(optionsProp, inputValue, filterFn);\n  }, [filterFn, inputValue, optionsProp]);\n\n  const [selectedOptionIndex, setSelectedOptionIndex] = React.useState<number | undefined>(\n    findSelectedIndex(options, props.value ?? defaultValue ?? null),\n  );\n\n  React.useEffect(\n    function updateOptionsIndexes() {\n      const value =\n        props.value !== undefined\n          ? props.value\n          : remapFromNativeValueToSelectValue(nativeSelectValue);\n\n      const selectedIndex = findSelectedIndex(options, value);\n      setSelectedOptionIndex(selectedIndex);\n      setFocusedOptionIndex(selectedIndex);\n    },\n    [props.value, nativeSelectValue, options, filterFn],\n  );\n\n  React.useEffect(\n    function syncIsControlledState() {\n      setIsControlledOutside((oldIsControlled) => {\n        const newIsControlled = props.value !== undefined;\n        checkMixControlledAndUncontrolledState(oldIsControlled, newIsControlled);\n        return newIsControlled;\n      });\n    },\n    [props.value],\n  );\n\n  React.useEffect(\n    function syncNativeSelectValueWithPropValue() {\n      if (props.value !== undefined) {\n        setNativeSelectValue(remapFromSelectValueToNativeValue(props.value));\n      }\n    },\n    [props.value, setNativeSelectValue],\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    if (\n      options.some(({ value }) => nativeSelectValue === value) ||\n      (allowClearButton && nativeSelectValue === NOT_SELECTED.NATIVE)\n    ) {\n      const event = new Event('change', { bubbles: true });\n\n      selectElRef.current?.dispatchEvent(event);\n    }\n  }, [nativeSelectValue]);\n\n  const selected = React.useMemo(() => {\n    if (!options.length) {\n      return null;\n    }\n\n    return selectedOptionIndex !== undefined ? options[selectedOptionIndex] : undefined;\n  }, [options, selectedOptionIndex]);\n\n  const openedClassNames = React.useMemo(\n    () =>\n      (opened &&\n        dropdownOffsetDistance === 0 &&\n        (popperPlacement.includes('top') ? styles.popUp : styles.popDown)) ||\n      undefined,\n    [dropdownOffsetDistance, opened, popperPlacement],\n  );\n\n  const scrollToElement = React.useCallback((index: number, center = false) => {\n    const dropdown = scrollBoxRef.current;\n    const optionsWrapper = optionsWrapperRef.current;\n    const item =\n      dropdown && optionsWrapper ? (optionsWrapper.children[index] as HTMLElement) : null;\n\n    if (!item || !dropdown) {\n      return;\n    }\n\n    const dropdownHeight = dropdown.offsetHeight;\n    const scrollTop = dropdown.scrollTop;\n    const itemTop = item.offsetTop;\n    const itemHeight = item.offsetHeight;\n\n    if (center) {\n      dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n    } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n      dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n    } else if (itemTop < scrollTop) {\n      dropdown.scrollTop = itemTop;\n    }\n  }, []);\n\n  const focusOptionByIndex = React.useCallback(\n    (index: number | undefined, scrollTo = true) => {\n      if (index === undefined || index < 0 || index > (options.length ?? 0) - 1) {\n        return;\n      }\n\n      const option = options[index];\n\n      if (option?.disabled) {\n        return;\n      }\n\n      if (scrollTo) {\n        scrollToElement(index);\n      }\n\n      setFocusedOptionIndex(index);\n    },\n    [options, scrollToElement],\n  );\n\n  const isValidIndex = React.useCallback(\n    (index: number) => {\n      return index >= 0 && index < (options.length ?? 0);\n    },\n    [options.length],\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    if (!opened) {\n      scrollPerformedRef.current = false;\n      return;\n    }\n\n    if (scrollPerformedRef.current) {\n      return;\n    }\n\n    const isIndexValid = selectedOptionIndex !== undefined && isValidIndex(selectedOptionIndex);\n\n    if (scrollBoxRef.current && isIndexValid) {\n      scrollPerformedRef.current = true;\n      scrollToElement(selectedOptionIndex, true);\n    }\n  }, [opened, selectedOptionIndex, scrollToElement, isValidIndex]);\n\n  const [keyboardInput, setKeyboardInput] = React.useState('');\n  const resetKeyboardInput = React.useCallback(() => {\n    setKeyboardInput('');\n  }, []);\n\n  const resetFocusedOption = React.useCallback(() => {\n    setFocusedOptionIndex(-1);\n  }, []);\n\n  const onKeyboardInput = React.useCallback(\n    (key: string) => {\n      if (!opened) {\n        setOpened(true);\n      }\n      resetFocusedOption();\n      const fullInput = keyboardInput + key;\n\n      setKeyboardInput(fullInput);\n    },\n    [keyboardInput, opened, resetFocusedOption],\n  );\n\n  const close = React.useCallback(() => {\n    resetKeyboardInput();\n\n    setInputValue('');\n    setOpened(false);\n    resetFocusedOption();\n    onClose?.();\n  }, [onClose, resetKeyboardInput, resetFocusedOption]);\n\n  const selectOption = React.useCallback(\n    (index: number) => {\n      const item = options[index];\n      setNativeSelectValue(item?.value ?? NOT_SELECTED.NATIVE);\n      close();\n\n      const shouldTriggerOnChangeWhenControlledAndInnerValueIsOutOfSync =\n        isControlledOutside &&\n        props.value !== nativeSelectValue &&\n        nativeSelectValue === item?.value;\n\n      if (shouldTriggerOnChangeWhenControlledAndInnerValueIsOutOfSync) {\n        const event = new Event('change', { bubbles: true });\n        selectElRef.current?.dispatchEvent(event);\n      }\n    },\n    [\n      close,\n      options,\n      selectElRef,\n      isControlledOutside,\n      props.value,\n      nativeSelectValue,\n      setNativeSelectValue,\n    ],\n  );\n\n  const selectFocused = React.useCallback(() => {\n    if (focusedOptionIndex === undefined || !isValidIndex(focusedOptionIndex)) {\n      return;\n    }\n\n    selectOption(focusedOptionIndex);\n  }, [focusedOptionIndex, isValidIndex, selectOption]);\n\n  const open = React.useCallback(() => {\n    setOpened(true);\n    setFocusedOptionIndex(selectedOptionIndex);\n\n    if (typeof onOpen === 'function') {\n      onOpen();\n    }\n  }, [onOpen, selectedOptionIndex]);\n\n  const onBlur = React.useCallback(() => {\n    close();\n    const event = new Event('focusout', { bubbles: true });\n    selectElRef.current?.dispatchEvent(event);\n  }, [close, selectElRef]);\n\n  const onFocus = React.useCallback(() => {\n    const event = new Event('focusin', { bubbles: true });\n    selectElRef.current?.dispatchEvent(event);\n  }, [selectElRef]);\n\n  const onClick = React.useCallback(() => {\n    if (opened) {\n      close();\n    } else {\n      open();\n    }\n  }, [close, open, opened]);\n\n  const handleKeyUp = React.useMemo(() => debounce(resetKeyboardInput, 1000), [resetKeyboardInput]);\n\n  const focusOption = React.useCallback(\n    (type: 'next' | 'prev') => {\n      let index = focusedOptionIndex;\n\n      if (type === 'next') {\n        const nextIndex = findIndexAfter(options, index);\n        index = nextIndex === -1 ? findIndexAfter(options) : nextIndex; // Следующий за index или первый валидный до index\n      } else if (type === 'prev') {\n        const beforeIndex = findIndexBefore(options, index);\n        index = beforeIndex === -1 ? findIndexBefore(options) : beforeIndex; // Предшествующий index или последний валидный после index\n      }\n\n      focusOptionByIndex(index);\n    },\n    [focusOptionByIndex, focusedOptionIndex, options],\n  );\n\n  const onNativeSelectChange: React.ChangeEventHandler<HTMLSelectElement> = (e) => {\n    // для ситуаций, когда в опциях value это string а value/defaultValue это number\n    // и наоборот, приводим значение nativeSelectValue из стейта к строке.\n    // ведь nativeSelect всегда возвращает string в onChange, а пользователь\n    // может использовать number для опций\n    //\n    // native select всегда возвращает string в качестве value в onChange\n    // Когда селект контролируемый, то пользователь, в onChange может сохранить в свой стейт строку (например '3'), хотя\n    // в качестве value опции может использовать число (3),\n    // тогда строчное значение value ('3') из стейта пользователя\n    // будет передано в CustomSelect, и после синхронизации nativeSelectValue (3) и props.value ('3') и после клика на уже выбранную опцию (3),\n    // когда nativeSelectValue обновится на значение опции (число 3),\n    // сравнение nativeSelectValue (3) и prevNativeSelectValue ('3') может не сработать лишь из-за того, что они в разных типах.\n    const convertedNativeSelectValue =\n      typeof nativeSelectValue === 'number' &&\n      (typeof props.value === 'string' || typeof prevNativeSelectValue === 'string')\n        ? String(nativeSelectValue)\n        : nativeSelectValue;\n\n    const isCalledWithSameControlledOptionValue =\n      isControlledOutside &&\n      props.value === remapFromNativeValueToSelectValue(convertedNativeSelectValue);\n\n    const isNativeValueChanged =\n      convertedNativeSelectValue !== prevNativeSelectValue && prevNativeSelectValue !== undefined;\n\n    const isTriggeredByClearButton = allowClearButton && nativeSelectValue === NOT_SELECTED.NATIVE;\n\n    const shouldCallOnChange =\n      !isCalledWithSameControlledOptionValue && (isNativeValueChanged || isTriggeredByClearButton);\n\n    if (!shouldCallOnChange) {\n      return;\n    }\n\n    const remappedNativeValue = remapFromNativeValueToSelectValue(e.currentTarget.value);\n\n    if (e.target.value === NOT_SELECTED.NATIVE) {\n      e.target.value = '';\n    }\n    if (e.currentTarget.value === NOT_SELECTED.NATIVE) {\n      e.currentTarget.value = '';\n    }\n\n    onChange?.(e, remappedNativeValue);\n  };\n\n  const onInputChange: React.ChangeEventHandler<HTMLInputElement> = React.useCallback(\n    (e) => {\n      onInputChangeProp && onInputChangeProp(e);\n      setInputValue(e.target.value);\n    },\n    [onInputChangeProp],\n  );\n\n  const areOptionsShown = React.useCallback(() => {\n    return scrollBoxRef.current !== null;\n  }, []);\n\n  const handleKeyDownSelect = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key.length === 1 && event.key !== ' ') {\n        onKeyboardInput(event.key);\n        return;\n      }\n\n      ['ArrowUp', 'ArrowDown', 'Escape', 'Enter'].includes(event.key) &&\n        areOptionsShown() &&\n        event.preventDefault();\n\n      switch (event.key) {\n        case 'ArrowUp':\n          if (opened) {\n            areOptionsShown() && focusOption('prev');\n          } else {\n            open();\n          }\n          break;\n        case 'ArrowDown':\n          if (opened) {\n            areOptionsShown() && focusOption('next');\n          } else {\n            open();\n          }\n          break;\n        case 'Escape':\n          close();\n          break;\n        case 'Backspace':\n        case 'Delete': {\n          if (!opened) {\n            setOpened(true);\n          }\n          resetFocusedOption();\n\n          break;\n        }\n        case 'Enter':\n        case 'Spacebar':\n        case ' ':\n          if (opened) {\n            areOptionsShown() && selectFocused();\n          } else {\n            open();\n          }\n          break;\n      }\n    },\n    [\n      areOptionsShown,\n      close,\n      focusOption,\n      onKeyboardInput,\n      open,\n      opened,\n      selectFocused,\n      resetFocusedOption,\n    ],\n  );\n\n  const handleInputKeydown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      onInputKeyDown?.(event, opened);\n    },\n    [opened, onInputKeyDown],\n  );\n  const _onInputKeyDown = callMultiple(handleKeyDownSelect, handleInputKeydown);\n\n  const handleOptionClick = React.useCallback(\n    (e: React.MouseEvent<HTMLElement>) => {\n      const index = Array.prototype.indexOf.call(\n        e.currentTarget.parentNode?.children,\n        e.currentTarget,\n      );\n      const option = options[index];\n\n      if (option && !option.disabled) {\n        selectOption(index);\n      }\n    },\n    [options, selectOption],\n  );\n\n  const lastMousePositionRef = React.useRef<MousePosition>({ x: 0, y: 0 });\n  const focusOptionOnMouseMove = React.useCallback(\n    (e: React.MouseEvent<HTMLElement>, index: number) => {\n      if (isMousePositionChanged(e, lastMousePositionRef.current)) {\n        focusOptionByIndex(index, false);\n      }\n    },\n    [focusOptionByIndex],\n  );\n\n  const popupAriaId = React.useId();\n  const renderOption = React.useCallback(\n    (option: OptionInterfaceT, index: number) => {\n      const hovered = index === focusedOptionIndex;\n      const selected = index === selectedOptionIndex;\n\n      return (\n        <React.Fragment key={`${typeof option.value}-${option.value}`}>\n          {renderOptionProp({\n            option,\n            hovered,\n            children: option.label,\n            selected,\n            disabled: option.disabled,\n            onClick: handleOptionClick,\n            onMouseDown: handleOptionDown,\n            // Используем `onMouseMove` вместо `onMouseEnter/onMouseOver`.\n            // Потому что если при навигации с клавиатуры курсор наведён на\n            // список, то при первом автоматическом скролле списка вызывается событие MouseOver/MouseEnter\n            // обработчик которого фокусирует опцию под курсором, хотя при навигация с клавиатуры пользователь мог уйти дальше по списку, это путает.\n            // Причём координаты события меняются на пару пикселей по сравнению с прошлым вызовом,\n            // а значит нельзя на них опираться, чтобы запретить обработку такого события.\n            // C mousemove такой проблемы нет, что позволяет реализовать поведение при наведении с клавиатуры и при наведении мышью идентично `<select>`.\n            onMouseMove: (e) => focusOptionOnMouseMove(e, index),\n            id: `${popupAriaId}-${option.value}`,\n            ...option,\n          })}\n        </React.Fragment>\n      );\n    },\n    [\n      focusedOptionIndex,\n      handleOptionClick,\n      focusOptionOnMouseMove,\n      renderOptionProp,\n      selectedOptionIndex,\n      popupAriaId,\n    ],\n  );\n\n  const resolvedContent = React.useMemo(() => {\n    const defaultDropdownContent =\n      options.length > 0 ? (\n        <div ref={optionsWrapperRef}>{options.map(renderOption)}</div>\n      ) : (\n        <Footnote className={styles.empty}>{emptyText}</Footnote>\n      );\n\n    if (typeof renderDropdown === 'function') {\n      return renderDropdown({ defaultDropdownContent });\n    } else {\n      return defaultDropdownContent;\n    }\n  }, [emptyText, options, renderDropdown, renderOption]);\n\n  const selectInputRef = useExternRef(getSelectInputRef);\n\n  const controlledValueSet = isControlledOutside && props.value !== NOT_SELECTED.CUSTOM;\n  const uncontrolledValueSet = !isControlledOutside && nativeSelectValue !== NOT_SELECTED.NATIVE;\n  const clearButtonShown =\n    allowClearButton && !opened && (controlledValueSet || uncontrolledValueSet);\n\n  const clearButton = React.useMemo(() => {\n    if (!clearButtonShown) {\n      return null;\n    }\n\n    return (\n      <ClearButton\n        className={iconProp === undefined ? styles.clearIcon : undefined}\n        onClick={function clearSelectState() {\n          setNativeSelectValue(NOT_SELECTED.NATIVE);\n          setInputValue('');\n          selectInputRef.current && selectInputRef.current.focus();\n        }}\n        disabled={restProps.disabled}\n        data-testid={clearButtonTestId}\n      />\n    );\n  }, [\n    clearButtonShown,\n    ClearButton,\n    iconProp,\n    restProps.disabled,\n    clearButtonTestId,\n    setNativeSelectValue,\n    selectInputRef,\n  ]);\n\n  const icon = React.useMemo(() => {\n    if (iconProp !== undefined) {\n      return iconProp;\n    }\n\n    return (\n      <DropdownIcon\n        className={clearButtonShown ? styles.dropdownIcon : undefined}\n        opened={opened}\n      />\n    );\n  }, [clearButtonShown, iconProp, opened]);\n\n  const afterIcons = (icon || clearButtonShown) && (\n    <React.Fragment>\n      {clearButton}\n      {icon}\n    </React.Fragment>\n  );\n\n  const { document } = useDOM();\n  const passClickAndFocusToInputOnClick = React.useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      // Раньше внешней оберткой CustomSelect был <label>, что позволяло по клику в любую область CustomSelect,\n      // даже где нету интерактивного элемента, фокусировать <input> и передавать на него событие клика.\n      // Так как мы больше не оборачиваем CustomSelect в <label>, то для обертки CustomSelect мы симулируем работу <label>.\n      // передаем фокус и клик по <input>, если пользователь кликнул в зоне обертки.\n      // В <label> мы не больше не оборачиваем, потому что это заставляет скринридер\n      // дважды произносить текст выбранной опции при фокусе, если CustomSelect связан с внешним <label>.\n      // Воспроизводится в некоторых версиях Chrome, при навигации по странице с помощью стрелок.\n      // Договорились со специалистом по доступности убрать <label>-обёртки из Select и CustomSelect\n\n      if (!selectInputRef.current || !document) {\n        return;\n      }\n\n      const clickTargetIsNotAnInput = e.target !== selectInputRef.current;\n      if (clickTargetIsNotAnInput) {\n        selectInputRef.current.click();\n\n        const inputIsNotFocused = document.activeElement !== selectInputRef.current;\n        if (inputIsNotFocused) {\n          selectInputRef.current.focus();\n        }\n      }\n    },\n    [document, selectInputRef],\n  );\n\n  const preventInputBlurWhenClickInsideFocusedSelectArea = (\n    e: React.MouseEvent<HTMLDivElement>,\n  ) => {\n    // Так как инпут больше не оборачивается пустым лэйблом, то клик внутри обертки,\n    // но вне инпута (например по иконке дропдауна), будет убирать фокус с инпута.\n    // Чтобы в такой ситуации отключить blur инпута мы превентим mousedown событие обёртки\n    const isInputFocused = document && document.activeElement === selectInputRef.current;\n    if (isInputFocused) {\n      e.preventDefault();\n    }\n  };\n\n  const ariaActiveDescendantOptionIndex: undefined | number =\n    focusedOptionIndex !== -1 ? focusedOptionIndex : undefined;\n  const ariaActiveDescendantId =\n    ariaActiveDescendantOptionIndex !== undefined\n      ? options[ariaActiveDescendantOptionIndex] && options[ariaActiveDescendantOptionIndex].value\n      : null;\n\n  const selectInputAriaProps: React.HTMLAttributes<HTMLElement> = {\n    'role': 'combobox',\n    'aria-controls': popupAriaId,\n    'aria-owns': popupAriaId,\n    'aria-expanded': opened,\n    'aria-activedescendant':\n      ariaActiveDescendantId && opened ? `${popupAriaId}-${ariaActiveDescendantId}` : undefined,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-haspopup': 'listbox',\n    'aria-autocomplete': 'none',\n  };\n\n  const focusWithin = useFocusWithin(handleRootRef);\n\n  const resetOptionFocusOnMouseLeave = React.useCallback(\n    (event: React.MouseEvent) => {\n      // В Хроме eсли мышка пользователя находится над инпутом селекта,\n      // и он с клавиатуры открывает опции, причём одна из опций\n      // уже выбрана, то видно, как выбранная опция получает фокус,\n      // но потом сразу же его теряет.\n      // Связано это с тем, что в этот момент вызывается onMouseLeave, на который у нас\n      // завязан сброс состония фокуса у опции. По хорошему фокус должен оставаться.\n      // Нам не интересен вызов onMouseLeave если мышка при этом не двигалась.\n      if (isMousePositionChanged(event, lastMousePositionRef.current)) {\n        resetFocusedOption();\n      }\n    },\n    [resetFocusedOption],\n  );\n\n  return (\n    <div\n      className={classNames(styles.host, sizeY !== 'regular' && sizeYClassNames[sizeY], className)}\n      style={style}\n      ref={handleRootRef}\n      onClick={passClickAndFocusToInputOnClick}\n      onMouseDown={preventInputBlurWhenClickInsideFocusedSelectArea}\n      onMouseMove={function updateLastMousePosition(e) {\n        lastMousePositionRef.current = { x: e.clientX, y: e.clientY };\n      }}\n    >\n      {focusWithin && selected && !opened && (\n        <VisuallyHidden aria-live=\"polite\">{selected.label}</VisuallyHidden>\n      )}\n      <CustomSelectInput\n        autoComplete=\"off\"\n        autoCapitalize=\"none\"\n        autoCorrect=\"off\"\n        spellCheck=\"false\"\n        {...restProps}\n        {...selectInputAriaProps}\n        getRef={selectInputRef}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        className={openedClassNames}\n        readOnly={!searchable}\n        fetching={fetching}\n        value={inputValue}\n        onKeyUp={handleKeyUp}\n        onKeyDown={_onInputKeyDown}\n        onChange={onInputChange}\n        onClick={onClick}\n        before={before}\n        after={afterIcons}\n        selectType={selectType}\n      >\n        {selected?.label}\n      </CustomSelectInput>\n      <select\n        tabIndex={-1}\n        ref={selectElRef}\n        name={name}\n        onChange={onNativeSelectChange}\n        onBlur={props.onBlur}\n        onFocus={props.onFocus}\n        onClick={props.onClick}\n        value={nativeSelectValue}\n        aria-hidden\n        className={styles.control}\n        data-testid={nativeSelectTestId}\n        required={required}\n      >\n        {(allowClearButton || nativeSelectValue === NOT_SELECTED.NATIVE) && (\n          <option key={NOT_SELECTED.NATIVE} value={NOT_SELECTED.NATIVE} />\n        )}\n        {optionsProp.map((item) => (\n          <option key={`${item.value}`} value={item.value} />\n        ))}\n      </select>\n      {opened && (\n        <CustomSelectDropdown\n          targetRef={containerRef}\n          placement={popperPlacement}\n          scrollBoxRef={scrollBoxRef}\n          onPlacementChange={setPopperPlacement}\n          onMouseLeave={resetOptionFocusOnMouseLeave}\n          fetching={fetching}\n          overscrollBehavior={overscrollBehavior}\n          offsetDistance={dropdownOffsetDistance}\n          autoWidth={dropdownAutoWidth}\n          forcePortal={forceDropdownPortal}\n          noMaxHeight={noMaxHeight}\n          role=\"listbox\"\n          id={popupAriaId}\n          aria-labelledby={ariaLabelledBy}\n          tabIndex={-1}\n        >\n          {resolvedContent}\n        </CustomSelectDropdown>\n      )}\n    </div>\n  );\n}\n"],"names":["React","classNames","debounce","useAdaptivity","useExternRef","useFocusWithin","useStateWithPrev","callMultiple","useDOM","defaultFilterFn","useIsomorphicLayoutEffect","warnOnce","CustomSelectDropdown","CustomSelectOption","DropdownIcon","NOT_SELECTED","remapFromNativeValueToSelectValue","remapFromSelectValueToNativeValue","Footnote","VisuallyHidden","CustomSelectClearButton","CustomSelectInput","styles","sizeYClassNames","none","sizeYNone","compact","sizeYCompact","findIndexAfter","options","startIndex","length","findIndex","option","i","disabled","findIndexBefore","endIndex","result","warn","checkOptionsValueType","Set","map","item","value","size","checkMixControlledAndUncontrolledState","oldIsControlled","newIsControlled","defaultRenderOptionFn","props","handleOptionDown","e","preventDefault","findSelectedIndex","CUSTOM","Number","filter","inputValue","filterFn","isMousePositionChanged","event","prevPosition","Math","abs","x","clientX","y","clientY","CustomSelect","opened","setOpened","useState","before","name","className","getRef","getRootRef","popupDirection","style","onChange","children","onInputChangeProp","renderDropdown","onOpen","onClose","fetching","forceDropdownPortal","selectType","searchable","renderOptionProp","optionsProp","emptyText","iconProp","ClearButton","allowClearButton","dropdownOffsetDistance","dropdownAutoWidth","noMaxHeight","ariaLabelledBy","clearButtonTestId","nativeSelectTestId","defaultValue","required","getSelectInputRef","overscrollBehavior","onInputKeyDown","restProps","process","env","NODE_ENV","sizeY","containerRef","useRef","handleRootRef","scrollBoxRef","selectElRef","optionsWrapperRef","scrollPerformedRef","focusedOptionIndex","setFocusedOptionIndex","isControlledOutside","setIsControlledOutside","undefined","setInputValue","nativeSelectValue","prevNativeSelectValue","setNativeSelectValue","NATIVE","popperPlacement","setPopperPlacement","useMemo","selectedOptionIndex","setSelectedOptionIndex","useEffect","updateOptionsIndexes","selectedIndex","syncIsControlledState","syncNativeSelectValueWithPropValue","some","Event","bubbles","current","dispatchEvent","selected","openedClassNames","includes","popUp","popDown","scrollToElement","useCallback","index","center","dropdown","optionsWrapper","dropdownHeight","offsetHeight","scrollTop","itemTop","offsetTop","itemHeight","focusOptionByIndex","scrollTo","isValidIndex","isIndexValid","keyboardInput","setKeyboardInput","resetKeyboardInput","resetFocusedOption","onKeyboardInput","key","fullInput","close","selectOption","shouldTriggerOnChangeWhenControlledAndInnerValueIsOutOfSync","selectFocused","open","onBlur","onFocus","onClick","handleKeyUp","focusOption","type","nextIndex","beforeIndex","onNativeSelectChange","convertedNativeSelectValue","String","isCalledWithSameControlledOptionValue","isNativeValueChanged","isTriggeredByClearButton","shouldCallOnChange","remappedNativeValue","currentTarget","target","onInputChange","areOptionsShown","handleKeyDownSelect","handleInputKeydown","_onInputKeyDown","handleOptionClick","Array","prototype","indexOf","call","parentNode","lastMousePositionRef","focusOptionOnMouseMove","popupAriaId","useId","renderOption","hovered","Fragment","label","onMouseDown","onMouseMove","id","resolvedContent","defaultDropdownContent","div","ref","empty","selectInputRef","controlledValueSet","uncontrolledValueSet","clearButtonShown","clearButton","clearIcon","clearSelectState","focus","data-testid","icon","dropdownIcon","afterIcons","document","passClickAndFocusToInputOnClick","clickTargetIsNotAnInput","click","inputIsNotFocused","activeElement","preventInputBlurWhenClickInsideFocusedSelectArea","isInputFocused","ariaActiveDescendantOptionIndex","ariaActiveDescendantId","selectInputAriaProps","focusWithin","resetOptionFocusOnMouseLeave","host","updateLastMousePosition","aria-live","autoComplete","autoCapitalize","autoCorrect","spellCheck","readOnly","onKeyUp","onKeyDown","after","select","tabIndex","aria-hidden","control","targetRef","placement","onPlacementChange","onMouseLeave","offsetDistance","autoWidth","forcePortal","role","aria-labelledby"],"mappings":"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"}